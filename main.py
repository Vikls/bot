# –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional, List, Tuple
import logging
import asyncio

class TradingBot:
    async def sync_positions_with_execution_history(self) -> Dict[str, Dict]:
        """
        –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–∏–∫–ª—é—á–Ω–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤.
        """
        try:
            self.logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π —á–µ—Ä–µ–∑ —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤")
            sync_results = {}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            symbols_to_sync = set(self.positions.keys()) | set(TRADING_CONFIG['trade_pairs'])
            
            for symbol in symbols_to_sync:
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                    position_data, history_details = await self.api_manager.full_trade_history_sync(
                        symbol=symbol,
                        lookback_hours=TRADING_CONFIG.get('sync_lookback_hours', 48)
                    )
                    
                    if position_data:
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                        if position_data.get('size', 0) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                            self.positions[symbol] = {
                                'side': position_data['side'],
                                'remaining_quantity': position_data['size'],
                                'entry_price': position_data['avg_price'],
                                'current_price': position_data['latest_price'],
                                'unrealized_pnl': position_data['unrealized_pnl'],
                                'last_sync_time': datetime.now(timezone.utc),
                                'sync_source': 'full_history_sync',
                                'trade_history': history_details
                            }
                            sync_results[symbol] = {
                                'status': 'updated',
                                'action': 'position_synced_from_history',
                                'details': position_data
                            }
                        else:
                            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —è–∫—â–æ –≤–æ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞
                            if symbol in self.positions:
                                del self.positions[symbol]
                            sync_results[symbol] = {
                                'status': 'closed',
                                'action': 'position_removed_too_small',
                                'details': position_data
                            }
                    else:
                        # –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó - –≤–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
                        if symbol in self.positions:
                            del self.positions[symbol]
                        sync_results[symbol] = {
                            'status': 'closed',
                            'action': 'position_not_found_in_history',
                            'details': None
                        }
                
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó {symbol}: {str(e)}", exc_info=True)
                    sync_results[symbol] = {
                        'status': 'error',
                        'action': 'sync_failed',
                        'error': str(e)
                    }
            
            self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–æ–±–ª–µ–Ω–æ {len(symbols_to_sync)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return sync_results
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {str(e)}", exc_info=True)
            return {'status': 'error', 'error': str(e)}

    async def validate_positions(self) -> None:
        """
        –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤
        """
        try:
            self.logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π")
            validated_count = 0
            
            for symbol in list(self.positions.keys()):
                try:
                    position_data, _ = await self.api_manager.full_trade_history_sync(
                        symbol=symbol,
                        lookback_hours=TRADING_CONFIG.get('sync_lookback_hours_short', 24)
                    )
                    
                    if not position_data or position_data.get('size', 0) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                        self.logger.warning(f"‚ùå –ü–æ–∑–∏—Ü—ñ—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞ - –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                        del self.positions[symbol]
                    else:
                        validated_count += 1
                        
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó {symbol}: {str(e)}", exc_info=True)
            
            self.logger.info(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ {validated_count} –ø–æ–∑–∏—Ü—ñ–π")
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {str(e)}", exc_info=True)
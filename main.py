# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import logging
import ntplib
import sys
import signal
import os
import pandas as pd
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Optional, List

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.api_manager import BybitAPIManager
from src.db_manager import DatabaseManager
from src.preprocessor import DataPreprocessor
from src.strategy import LightningVolumeStrategy
from src.telegram import TelegramNotifier
from src.utils.pnl_calculator import PnLCalculator
from config.settings import (
    TRADING_CONFIG, STRATEGY_CONFIG, LOGGING_CONFIG, 
    API_CONFIG, TELEGRAM_CONFIG, INDICATORS_CONFIG 
)


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    log_level = getattr(logging, LOGGING_CONFIG.get('level', 'INFO'))
    os.makedirs(LOGGING_CONFIG.get('log_dir', 'logs'), exist_ok=True)
    log_format = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    if LOGGING_CONFIG.get('enable_console', True):
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(log_level)
        console_handler.setFormatter(log_format)
        root_logger.addHandler(console_handler)
    from logging.handlers import RotatingFileHandler
    main_log_handler = RotatingFileHandler(
        os.path.join(LOGGING_CONFIG.get('log_dir', 'logs'), 'logs.log'), 
        maxBytes=LOGGING_CONFIG.get('max_file_size', 10*1024*1024),
        backupCount=LOGGING_CONFIG.get('backup_count', 5),
        encoding='utf-8'
    )
    main_log_handler.setLevel(log_level)
    main_log_handler.setFormatter(log_format)
    root_logger.addHandler(main_log_handler)
    error_log_handler = RotatingFileHandler(
        os.path.join(LOGGING_CONFIG.get('log_dir', 'logs'), 'errors.log'), 
        maxBytes=LOGGING_CONFIG.get('max_file_size', 10*1024*1024),
        backupCount=LOGGING_CONFIG.get('backup_count', 5),
        encoding='utf-8'
    )
    error_log_handler.setLevel(logging.ERROR)
    error_log_handler.setFormatter(log_format)
    root_logger.addHandler(error_log_handler)
    trade_log_handler = RotatingFileHandler(
        os.path.join(LOGGING_CONFIG.get('log_dir', 'logs'), 'trades.log'), 
        maxBytes=LOGGING_CONFIG.get('max_file_size', 10*1024*1024),
        backupCount=LOGGING_CONFIG.get('backup_count', 5),
        encoding='utf-8'
    )
    # --- –ó–ú–Ü–ù–ê: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è trading ---
    trade_log_level_str = LOGGING_CONFIG.get('trade_log_level', 'INFO').upper()
    trade_log_level = getattr(logging, trade_log_level_str, logging.INFO)
    # --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò ---
    
    trade_log_handler.setLevel(trade_log_level)
    trade_log_handler.setFormatter(log_format)
    
    trade_logger = logging.getLogger('trading') 
    trade_logger.addHandler(trade_log_handler)
    trade_logger.propagate = False 
    trade_logger.setLevel(trade_log_level)


class TradingBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.trade_logger = logging.getLogger('trading')
        
        self.api_manager = BybitAPIManager()
        self.db_manager = DatabaseManager()
        self.preprocessor = DataPreprocessor()
        self.strategy = LightningVolumeStrategy()
        self.telegram = TelegramNotifier()
        
        # Initialize unified P&L calculator
        self.pnl_calculator = PnLCalculator(api_config=API_CONFIG, logger=self.logger)
        
        self.is_running = False
        self.positions: Dict[str, Dict[str, Any]] = {} 
        self.last_analysis_time: Dict[str, datetime] = {}
        
        # ‚úÖ –î–û–î–ê–ù–û: –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é
        self.processed_closures: Dict[str, Dict[str, Any]] = {}  # –ö–ª—é—á: symbol, –ó–Ω–∞—á–µ–Ω–Ω—è: –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.closure_cleanup_interval_hours = 48  # –û—á–∏—â–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —Å—Ç–∞—Ä—à–µ 48 –≥–æ–¥–∏–Ω
        
        # Async task management
        self._tasks: List[asyncio.Task] = []
        self._task_groups = {
            'data_processing': [],
            'trading': [],
            'monitoring': [],
            'maintenance': []
        }
        self._shutdown_event = asyncio.Event()
        
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        # Trade statistics
        self.trade_stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_pnl': 0.0,
            'initial_balance': None
        }
        
        self.logger.info("Trading Bot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º async task management")

    async def _validate_and_correct_trade_statistics(self) -> bool:
        """
        ‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Returns:
            bool: True —è–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–ª–∞ –≤–∞–ª—ñ–¥–Ω–æ—é –∞–±–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞
        """
        try:
            original_stats = self.trade_stats.copy()
            corrections_made = []
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
            calculated_total = self.trade_stats['winning_trades'] + self.trade_stats['losing_trades']
            
            if calculated_total != self.trade_stats['total_trades']:
                self.trade_stats['total_trades'] = calculated_total
                corrections_made.append(f"total_trades: {original_stats['total_trades']} ‚Üí {calculated_total}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            if self.trade_stats['winning_trades'] < 0:
                self.trade_stats['winning_trades'] = 0
                corrections_made.append(f"winning_trades: {original_stats['winning_trades']} ‚Üí 0")
            
            if self.trade_stats['losing_trades'] < 0:
                self.trade_stats['losing_trades'] = 0
                corrections_made.append(f"losing_trades: {original_stats['losing_trades']} ‚Üí 0")
            
            if self.trade_stats['total_trades'] < 0:
                self.trade_stats['total_trades'] = 0
                corrections_made.append(f"total_trades: {original_stats['total_trades']} ‚Üí 0")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ—á–Ω–æ—Å—Ç—ñ P&L
            if not isinstance(self.trade_stats['total_pnl'], (int, float)):
                self.trade_stats['total_pnl'] = 0.0
                corrections_made.append(f"total_pnl: {original_stats['total_pnl']} ‚Üí 0.0 (invalid type)")
            
            # –Ø–∫—â–æ –±—É–ª–∏ –∑—Ä–æ–±–ª–µ–Ω—ñ –∫–æ—Ä–µ–∫—Ü—ñ—ó
            if corrections_made:
                self.logger.warning(
                    f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ü–†–ê–í–õ–ï–ù–ê: –ó–Ω–∞–π–¥–µ–Ω–æ {len(corrections_made)} –ø–æ–º–∏–ª–æ–∫:\n" +
                    "\n".join(f"   ‚Ä¢ {correction}" for correction in corrections_made)
                )
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await self.db_manager.save_trade_stats(self.trade_stats)
                
                # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∫–æ—Ä–µ–∫—Ü—ñ—é
                if hasattr(self, 'telegram') and len(corrections_made) > 2:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è –∑–Ω–∞—á–Ω–∏—Ö –∫–æ—Ä–µ–∫—Ü—ñ–π
                    correction_msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ ({len(corrections_made)} –ø–æ–º–∏–ª–æ–∫)"
                    await self.telegram.send_notification(correction_msg, message_type='statistics_correction')
                
                return True
            else:
                self.logger.debug("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó/–∫–æ—Ä–µ–∫—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            return False

    async def _log_detailed_statistics(self, context: str = "periodic_check"):
        """
        ‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–ª–∏–∫—É –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        """
        try:
            # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            total_calculated = self.trade_stats['winning_trades'] + self.trade_stats['losing_trades']
            win_rate = (self.trade_stats['winning_trades'] / self.trade_stats['total_trades'] * 100) if self.trade_stats['total_trades'] > 0 else 0
            avg_trade = self.trade_stats['total_pnl'] / self.trade_stats['total_trades'] if self.trade_stats['total_trades'] > 0 else 0
            
            # –°—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ–π
            active_positions = len(self.positions)
            positions_list = list(self.positions.keys()) if self.positions else []
            
            # –°—Ç–∞–Ω –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
            processed_trades = len(getattr(self, '_processed_trade_stats', {}))
            processed_closures = len(getattr(self, 'processed_closures', {}))
            
            self.logger.info(
                f"üìä –î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({context}):\n"
                f"   üéØ –£–≥–æ–¥–∏: {self.trade_stats['total_trades']} "
                f"(‚úÖ{self.trade_stats['winning_trades']} / ‚ùå{self.trade_stats['losing_trades']} = {total_calculated})\n"
                f"   üí∞ P&L: {self.trade_stats['total_pnl']:+.4f} USDT (—Å–µ—Ä–µ–¥–Ω—è: {avg_trade:+.4f} USDT)\n"
                f"   üìà –í—ñ–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n"
                f"   üìç –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó: {active_positions} {positions_list}\n"
                f"   üîÑ –î–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è: {processed_trades} —Ç–æ—Ä–≥. –∑–∞–ø–∏—Å—ñ–≤, {processed_closures} –∑–∞–∫—Ä–∏—Ç—Ç—ñ–≤\n"
                f"   ‚öñÔ∏è –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å: {'‚úÖ OK' if total_calculated == self.trade_stats['total_trades'] else '‚ùå –ü–û–ú–ò–õ–ö–ê'}"
            )
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _is_closure_already_processed(self, symbol: str, closure_data: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±—É–ª–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ü–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            if symbol not in self.processed_closures:
                return False
            
            processed_closure = self.processed_closures[symbol]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ - —è–∫—â–æ –º–∏–Ω—É–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ cleanup_interval, –≤–≤–∞–∂–∞—î–º–æ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–º
            processed_time = processed_closure.get('processed_at')
            if processed_time:
                hours_passed = (datetime.now(timezone.utc) - processed_time).total_seconds() / 3600
                if hours_passed > self.closure_cleanup_interval_hours:
                    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∑–∞–ø–∏—Å
                    del self.processed_closures[symbol]
                    return False
            
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
            current_exit_price = closure_data.get('exit_price', 0)
            current_quantity = closure_data.get('quantity', 0)
            current_closure_type = closure_data.get('closure_type', '')
            
            processed_exit_price = processed_closure.get('exit_price', 0)
            processed_quantity = processed_closure.get('quantity', 0) 
            processed_closure_type = processed_closure.get('closure_type', '')
            
            # –Ø–∫—â–æ –≤—Å—ñ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è, –≤–≤–∞–∂–∞—î–º–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º
            price_tolerance = 0.000001
            qty_tolerance = 0.0000001
            
            if (abs(current_exit_price - processed_exit_price) < price_tolerance and
                abs(current_quantity - processed_quantity) < qty_tolerance and
                current_closure_type == processed_closure_type):
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è {symbol}: {e}")
            return False
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±—É–ª–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ü–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            if symbol not in self.processed_closures:
                return False
            
            processed_closure = self.processed_closures[symbol]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ - —è–∫—â–æ –º–∏–Ω—É–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ cleanup_interval, –≤–≤–∞–∂–∞—î–º–æ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–º
            processed_time = processed_closure.get('processed_at')
            if processed_time:
                hours_passed = (datetime.now(timezone.utc) - processed_time).total_seconds() / 3600
                if hours_passed > self.closure_cleanup_interval_hours:
                    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∑–∞–ø–∏—Å
                    del self.processed_closures[symbol]
                    return False
            
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
            current_exit_price = closure_data.get('exit_price', 0)
            current_quantity = closure_data.get('quantity', 0)
            current_closure_type = closure_data.get('closure_type', '')
            
            processed_exit_price = processed_closure.get('exit_price', 0)
            processed_quantity = processed_closure.get('quantity', 0) 
            processed_closure_type = processed_closure.get('closure_type', '')
            
            # –Ø–∫—â–æ –≤—Å—ñ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è, –≤–≤–∞–∂–∞—î–º–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º
            price_tolerance = 0.000001
            qty_tolerance = 0.0000001
            
            if (abs(current_exit_price - processed_exit_price) < price_tolerance and
                abs(current_quantity - processed_quantity) < qty_tolerance and
                current_closure_type == processed_closure_type):
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è {symbol}: {e}")
            return False
    
    def _mark_closure_as_processed(self, symbol: str, closure_data: Dict[str, Any]):
        """–ü–æ–∑–Ω–∞—á–∞—î –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ"""
        try:
            self.processed_closures[symbol] = {
                'exit_price': closure_data.get('exit_price', 0),
                'quantity': closure_data.get('quantity', 0),
                'closure_type': closure_data.get('closure_type', ''),
                'processed_at': datetime.now(timezone.utc),
                'pnl_usdt': closure_data.get('pnl_usdt', 0),
                'closure_reason': closure_data.get('closure_reason', '')
            }
            
            # –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ
            if len(self.processed_closures) > 50:  # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Å—ñ–≤
                self._cleanup_old_processed_closures()
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è {symbol}: {e}")
    
    def _cleanup_old_processed_closures(self):
        """–û—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è"""
        try:
            current_time = datetime.now(timezone.utc)
            expired_symbols = []
            
            for symbol, closure_data in self.processed_closures.items():
                processed_time = closure_data.get('processed_at')
                if processed_time:
                    hours_passed = (current_time - processed_time).total_seconds() / 3600
                    if hours_passed > self.closure_cleanup_interval_hours:
                        expired_symbols.append(symbol)
            
            for symbol in expired_symbols:
                del self.processed_closures[symbol]
            
            if expired_symbols:
                self.logger.info(f"–û—á–∏—â–µ–Ω–æ {len(expired_symbols)} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π")
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")

    def validate_trade_stats(self) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            total_calculated = self.trade_stats['winning_trades'] + self.trade_stats['losing_trades']
            
            if total_calculated != self.trade_stats['total_trades']:
                self.logger.warning(
                    f"‚ö†Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–ê: "
                    f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ —É–≥–æ–¥: {total_calculated} "
                    f"(W:{self.trade_stats['winning_trades']} + L:{self.trade_stats['losing_trades']}), "
                    f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ: {self.trade_stats['total_trades']}, "
                    f"–†—ñ–∑–Ω–∏—Ü—è: {self.trade_stats['total_trades'] - total_calculated}"
                )
                return False
            
            if self.trade_stats['total_trades'] < 0 or self.trade_stats['winning_trades'] < 0 or self.trade_stats['losing_trades'] < 0:
                self.logger.error(
                    f"‚ùå –ù–ï–ì–ê–¢–ò–í–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø –í –°–¢–ê–¢–ò–°–¢–ò–¶–Ü: "
                    f"Total:{self.trade_stats['total_trades']}, "
                    f"Win:{self.trade_stats['winning_trades']}, "
                    f"Loss:{self.trade_stats['losing_trades']}"
                )
                return False
                
            return True
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False

    async def _update_trade_statistics(self, symbol: str, pnl: float, trade_data: Dict[str, Any], reason: str = "trade_completed") -> bool:
        """
        ‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞ –ø–∞—Ä–∞
            pnl: P&L —É–≥–æ–¥–∏
            trade_data: –î–∞–Ω—ñ –ø—Ä–æ —É–≥–æ–¥—É
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            bool: True —è–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞, False —è–∫—â–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—ñ–∫–∞—Ç)
        """
        try:
            # ‚úÖ –ó–ê–•–ò–°–¢ –í–Ü–î –ü–û–î–í–Ü–ô–ù–û–ì–û –ü–Ü–î–†–ê–•–£–ù–ö–£
            trade_id = f"{symbol}_{trade_data.get('action', 'unknown')}_{trade_data.get('price', 0):.6f}_{trade_data.get('quantity', 0):.8f}_{reason}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏ –≤–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ü—ñ—î—ó —É–≥–æ–¥–∏
            if not hasattr(self, '_processed_trade_stats'):
                self._processed_trade_stats = {}
            
            if trade_id in self._processed_trade_stats:
                time_since_processed = (datetime.now(timezone.utc) - self._processed_trade_stats[trade_id]).total_seconds()
                if time_since_processed < 300:  # 5 —Ö–≤–∏–ª–∏–Ω –∑–∞—Ö–∏—Å—Ç
                    self.logger.debug(f"üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {symbol} –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∞ {time_since_processed:.0f}—Å —Ç–æ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                    return False
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            previous_stats = self.trade_stats.copy()
            
            self.trade_stats['total_trades'] += 1
            self.trade_stats['total_pnl'] += pnl
            
            if pnl > 0:
                self.trade_stats['winning_trades'] += 1
                trade_result = "WIN"
            elif pnl < 0:
                self.trade_stats['losing_trades'] += 1
                trade_result = "LOSS"
            else:
                self.trade_stats['losing_trades'] += 1  # Breakeven –≤–≤–∞–∂–∞—î–º–æ —è–∫ –∑–±–∏—Ç–æ–∫
                trade_result = "BREAKEVEN"
            
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
            self._processed_trade_stats[trade_id] = datetime.now(timezone.utc)
            
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∏–Ω–∏)
            if len(self._processed_trade_stats) > 100:
                current_time = datetime.now(timezone.utc)
                expired_keys = [
                    key for key, timestamp in self._processed_trade_stats.items()
                    if (current_time - timestamp).total_seconds() > 3600
                ]
                for key in expired_keys:
                    del self._processed_trade_stats[key]
            
            # –í–∞–ª—ñ–¥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.validate_trade_stats():
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                await self.db_manager.save_trade_stats(self.trade_stats)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
                if hasattr(self, 'strategy') and self.strategy:
                    self.strategy.update_risk_management(pnl)
                
                self.logger.info(
                    f"‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ù–û–í–õ–ï–ù–ê: {symbol} ({trade_result}) - "
                    f"P&L: {pnl:+.4f} USDT, –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"   üìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
                    f"–£–≥–æ–¥: {self.trade_stats['total_trades']} "
                    f"(W:{self.trade_stats['winning_trades']}/L:{self.trade_stats['losing_trades']}), "
                    f"–ó–∞–≥–∞–ª—å–Ω–∏–π P&L: {self.trade_stats['total_pnl']:+.4f} USDT"
                )
                return True
            else:
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                self.trade_stats = previous_stats
                self.logger.error(f"‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∞, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {symbol}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {symbol}: {e}", exc_info=True)
            return False
    
    def _create_task(self, coro, name: str, group: str = 'general') -> asyncio.Task:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á—ñ –∑ proper tracking"""
        task = asyncio.create_task(coro, name=name)
        self._tasks.append(task)
        
        if group in self._task_groups:
            self._task_groups[group].append(task)
        
        # Callback –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–¥–∞—á
        def task_done_callback(completed_task):
            try:
                self._tasks.remove(completed_task)
                for group_tasks in self._task_groups.values():
                    if completed_task in group_tasks:
                        group_tasks.remove(completed_task)
                        break
            except ValueError:
                pass  # Task already removed
        
        task.add_done_callback(task_done_callback)
        self.logger.debug(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–¥–∞—á—É: {name} –≤ –≥—Ä—É–ø—ñ {group}")
        return task
    
    async def _cancel_task_group(self, group: str, timeout: float = 10.0):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –∑–∞–¥–∞—á –∑ —Ç–∞–π–º–∞—É—Ç–æ–º"""
        if group not in self._task_groups:
            return
        
        tasks = self._task_groups[group].copy()
        if not tasks:
            return
        
        self.logger.info(f"–°–∫–∞—Å—É–≤–∞–Ω–Ω—è {len(tasks)} –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø—ñ '{group}'")
        
        # –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
        for task in tasks:
            if not task.done():
                task.cancel()
        
        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=timeout
            )
        except asyncio.TimeoutError:
            self.logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–¥–∞—á –≥—Ä—É–ø–∏ '{group}'")
    
    async def _shutdown_all_tasks(self):
        """Graceful shutdown –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á"""
        try:
            # –°–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ shutdown
            self._shutdown_event.set()
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–¥–∞—á—ñ –ø–æ –≥—Ä—É–ø–∞—Ö
            for group in ['maintenance', 'monitoring', 'trading', 'data_processing']:
                await self._cancel_task_group(group, timeout=5.0)
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Ä–µ—à—Ç—É –∑–∞–¥–∞—á
            remaining_tasks = [task for task in self._tasks if not task.done()]
            if remaining_tasks:
                self.logger.info(f"–°–∫–∞—Å—É–≤–∞–Ω–Ω—è {len(remaining_tasks)} –∑–∞–¥–∞—á —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è")
                for task in remaining_tasks:
                    task.cancel()
                
                try:
                    await asyncio.wait_for(
                        asyncio.gather(*remaining_tasks, return_exceptions=True),
                        timeout=10.0
                    )
                except asyncio.TimeoutError:
                    self.logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–¥–∞—á")
            
            self.logger.info("–í—Å—ñ –∑–∞–¥–∞—á—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ shutdown –∑–∞–¥–∞—á: {e}")

    def _signal_handler(self, signum, frame):
        self.logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False
    
    async def check_ntp_sync(self) -> bool:
        try:
            ntp_client = ntplib.NTPClient()
            ntp_servers = ['pool.ntp.org', 'time.google.com', 'time.cloudflare.com', 'time.windows.com']
            for server in ntp_servers:
                try:
                    response = ntp_client.request(server, version=3, timeout=5)
                    ntp_time = datetime.fromtimestamp(response.tx_time, tz=timezone.utc)
                    local_time = datetime.now(timezone.utc)
                    time_diff = abs((ntp_time - local_time).total_seconds())
                    self.logger.info(
                        f"NTP —Å–µ—Ä–≤–µ—Ä: {server}, NTP —á–∞—Å: {ntp_time.strftime('%Y-%m-%d %H:%M:%S')} UTC, "
                        f"–õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å: {local_time.strftime('%Y-%m-%d %H:%M:%S')} UTC, "
                        f"–†—ñ–∑–Ω–∏—Ü—è: {time_diff:.2f} —Å–µ–∫—É–Ω–¥"
                    )
                    if time_diff > 10:
                        self.logger.warning(f"–í–µ–ª–∏–∫–∏–π –∑—Å—É–≤ —á–∞—Å—É: {time_diff:.2f} —Å–µ–∫—É–Ω–¥!")
                        await self.telegram.send_error_notification({
                            'type': 'TIME_SYNC_WARNING', 
                            'message': f'–ó—Å—É–≤ —á–∞—Å—É –∑ NTP: {time_diff:.2f} —Å–µ–∫—É–Ω–¥'
                        })
                    self.logger.info("–ß–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                    return True
                except Exception as e:
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ NTP —Å–µ—Ä–≤–µ—Ä–∞ {server}: {e}")
            self.logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –∂–æ–¥–Ω–æ–≥–æ NTP —Å–µ—Ä–≤–µ—Ä–∞")
            return False
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ NTP: {e}")
            return False

    async def validate_candle_data(self, symbol: str, candle_data: Dict) -> bool:
        try:
            if not candle_data:
                return False
            required_fields = ['open_price', 'high_price', 'low_price', 'close_price', 'volume']
            if any(field not in candle_data or candle_data[field] is None for field in required_fields):
                self.logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ –≤ –¥–∞–Ω–∏—Ö —Å–≤—ñ—á–∫–∏ –¥–ª—è {symbol}")
                return False
            
            open_price, high_price, low_price, close_price, volume = (
                float(candle_data['open_price']), float(candle_data['high_price']),
                float(candle_data['low_price']), float(candle_data['close_price']),
                float(candle_data['volume'])
            )

            if any(price <= 0 for price in [open_price, high_price, low_price, close_price]):
                self.logger.warning(
                    f"–ê–Ω–æ–º–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: OHLC={open_price},{high_price},{low_price},{close_price}"
                )
                return False
            if high_price < low_price:
                self.logger.warning(f"High < Low –¥–ª—è {symbol}: {high_price} < {low_price}")
                return False
            if not (low_price <= open_price <= high_price and low_price <= close_price <= high_price):
                self.logger.warning(f"Open/Close –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ High/Low –¥–ª—è {symbol}")
                return False
            if volume < 0:
                self.logger.warning(f"–í—ñ–¥'—î–º–Ω–∏–π –æ–±'—î–º –¥–ª—è {symbol}: {volume}")
                return False
            if open_price > 0: 
                max_change = max(
                    abs(high_price - low_price) / open_price, 
                    abs(close_price - open_price) / open_price
                )
                if max_change > 0.5:  # 50% change in one candle
                    self.logger.warning(f"–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {max_change*100:.1f}%")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–≤—ñ—á–∫–∏ –¥–ª—è {symbol}: {e}")
            return False

    async def initialize(self) -> bool:
        try:
            self.logger.info("–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            ntp_sync = await self.check_ntp_sync()
            if not ntp_sync:
                self.logger.warning("NTP —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
            api_sync = await self.api_manager.check_time_sync()
            if not api_sync:
                self.logger.error("API —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞!")
                await self.telegram.send_error_notification({
                    'type': 'API_SYNC_ERROR', 
                    'message': '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Bybit API'
                })
                return False
            await self.preprocessor.initialize()
            self.logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
            await self.preprocessor.load_initial_data()
            for symbol in TRADING_CONFIG['trade_pairs']:
                integrity_ok = await self.preprocessor.validate_indicators_integrity(symbol)
                if not integrity_ok:
                    self.logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—é —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è {symbol}")
            if self.telegram.bot:
                telegram_test = await self.telegram.test_connection()
                if telegram_test:
                    await self.telegram.send_bot_status("INITIALIZED", {
                        "–†–µ–∂–∏–º": TRADING_CONFIG['mode'],
                        "–ü–∞—Ä–∏": ', '.join(TRADING_CONFIG['trade_pairs']),
                        "–¢–∞–π–º—Ñ—Ä–µ–π–º": f"{TRADING_CONFIG['timeframe']}m"
                    })
                else:
                    self.logger.warning("Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
            self.logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            return True
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}", exc_info=True)
            await self.telegram.send_error_notification({
                'type': 'INITIALIZATION_ERROR', 
                'message': str(e)
            })
            return False

    async def execute_trade(self, symbol: str, signal_data: Dict[str, Any]) -> Dict[str, Any]:
        try:
            signal_type = signal_data['signal'] # BUY or SELL
            intended_entry_price = float(signal_data['entry_price']) 
            
            self.trade_logger.info(
                f"üöÄ EXECUTE_TRADE START: {signal_type} trade for {symbol} "
                f"at intended entry price ~{intended_entry_price:.6f}"
            )

            # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            try:
                usdt_balance = await self.api_manager.get_usdt_balance()
                self.trade_logger.info(f"‚úÖ Step 1 - Current USDT balance: {usdt_balance:.2f}")
            except Exception as e:
                self.trade_logger.error(f"‚ùå Step 1 FAILED - Error getting USDT balance: {e}", exc_info=True)
                return {'symbol': symbol, 'action': 'ERROR_GETTING_BALANCE', 'signal': signal_type, 'success': False, 'error': str(e)}

            # –ö—Ä–æ–∫ 2: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
            position_size_percent = TRADING_CONFIG.get('min_order_amount', 10)
            position_size_usdt = usdt_balance * (position_size_percent / 100.0)
            leverage = TRADING_CONFIG.get('leverage', 1)
            position_value_with_leverage = position_size_usdt * leverage
            min_order_value_usdt_config = TRADING_CONFIG.get('min_order_value_usdt', 5.0)
            
            self.trade_logger.info(
                f"‚úÖ Step 2 - Position calculation: "
                f"Balance: {usdt_balance:.2f} USDT, "
                f"Allocation: {position_size_percent}% = {position_size_usdt:.2f} USDT, "
                f"Leverage: {leverage}x, "
                f"Position value with leverage: {position_value_with_leverage:.2f} USDT, "
                f"Min required (base): {min_order_value_usdt_config} USDT"
            )
            if position_size_usdt < min_order_value_usdt_config:
                self.trade_logger.warning(f"‚ùå Step 2 FAILED - Base position value {position_size_usdt:.2f} USDT is below minimum {min_order_value_usdt_config} USDT")
                return {'symbol': symbol, 'action': 'ORDER_VALUE_TOO_SMALL', 'signal': signal_type, 'success': False, 'error': f'Base order value {position_size_usdt:.2f} USDT too small (min: {min_order_value_usdt_config})'}

            # –ö—Ä–æ–∫ 3: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            initial_raw_quantity = position_value_with_leverage / intended_entry_price if intended_entry_price > 0 else 0
            self.trade_logger.info(f"‚úÖ Step 3 - Quantity calculation: Pos value w/ lev: {position_value_with_leverage:.2f} USDT, Entry price: {intended_entry_price:.6f}, Initial qty: {initial_raw_quantity:.8f}")
            if initial_raw_quantity == 0:
                self.trade_logger.error(f"‚ùå Step 3 FAILED - Initial quantity is zero for {symbol}")
                return {'symbol': symbol, 'action': 'ZERO_INITIAL_QUANTITY', 'signal': signal_type, 'success': False, 'error': 'Initial quantity calculated as zero'}

            # –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π
            if len(self.positions) >= TRADING_CONFIG.get('max_orders_qty', 5):
                self.trade_logger.warning(f"‚ùå Step 4 FAILED - Maximum number of positions reached: {len(self.positions)}/{TRADING_CONFIG.get('max_orders_qty', 5)}")
                return {'symbol': symbol, 'action': 'MAX_POSITIONS_REACHED', 'signal': signal_type, 'success': False, 'error': f'Maximum positions limit reached: {len(self.positions)}'}

            # –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Å–∏–º–≤–æ–ª–∞
            if "USDT" not in symbol: 
                self.trade_logger.error(f"‚ùå Step 5 FAILED - {symbol} is not a USDT pair")
                return {'symbol': symbol, 'action': 'INVALID_SYMBOL_TYPE', 'signal': signal_type, 'success': False, 'error': 'Not a USDT pair'}
            self.trade_logger.info(f"‚úÖ Step 5 - Symbol validation passed: {symbol}")

            # –ö—Ä–æ–∫ 6: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            quantity_for_api_float = initial_raw_quantity 
            quantity_str_for_api = ""
            instrument_details = None
            price_decimals_from_instrument = 6 # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è USDT –ø–∞—Ä

            try:
                self.trade_logger.info(f"üîç Step 6 - Getting instrument info for {symbol}...")
                instrument_details = await self.api_manager.get_instrument_info(symbol=symbol)
                
                if instrument_details:
                    self.trade_logger.info(f"‚úÖ Step 6 - Instrument details received for {symbol}")
                    lot_size_filter = instrument_details.get('lotSizeFilter', {})
                    qty_step_str = lot_size_filter.get('qtyStep')
                    min_order_qty_str = lot_size_filter.get('minOrderQty')
                    min_notional_value_str = lot_size_filter.get('minNotionalValue')
                    
                    price_filter = instrument_details.get('priceFilter', {})
                    tick_size_str_for_price = price_filter.get('tickSize')
                    if tick_size_str_for_price:
                        if '.' in tick_size_str_for_price: price_decimals_from_instrument = len(tick_size_str_for_price.split('.')[1].rstrip('0'))
                        else: price_decimals_from_instrument = 0

                    self.trade_logger.info(f"üìä Step 6 - Filters: qtyStep={qty_step_str}, minOrderQty={min_order_qty_str}, minNotional={min_notional_value_str}, priceDecimals={price_decimals_from_instrument}")

                    qty_decimals_for_api = 0 
                    if qty_step_str and '.' in qty_step_str:
                        qty_decimals_for_api = len(qty_step_str.split('.')[1].rstrip('0'))
                    
                    if qty_step_str:
                        qty_step = float(qty_step_str)
                        if qty_step > 0:
                            quantity_for_api_float = round(initial_raw_quantity / qty_step) * qty_step
                            if quantity_for_api_float == 0 and initial_raw_quantity > 0: 
                                quantity_for_api_float = qty_step 
                            self.trade_logger.info(f"‚úÖ Step 6.1 - Qty adjusted to qtyStep: {quantity_for_api_float:.{qty_decimals_for_api}f}")
                    
                    if min_order_qty_str:
                        min_order_qty = float(min_order_qty_str)
                        if quantity_for_api_float < min_order_qty and min_order_qty > 0:
                            quantity_for_api_float = min_order_qty
                            self.trade_logger.info(f"‚úÖ Step 6.2 - Qty adjusted to minOrderQty: {quantity_for_api_float:.{qty_decimals_for_api}f}")
                    
                    quantity_str_for_api = f"{quantity_for_api_float:.{qty_decimals_for_api}f}"
                    if '.' in quantity_str_for_api and qty_decimals_for_api == 0 :
                        quantity_str_for_api = quantity_str_for_api.split('.')[0]
                    elif '.' in quantity_str_for_api: # –î–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ —Ç–∏–ø—É 123.000 -> 123
                        if float(quantity_str_for_api) == int(float(quantity_str_for_api)):
                            quantity_str_for_api = str(int(float(quantity_str_for_api)))
                        else: # 123.4500 -> 123.45
                            quantity_str_for_api = quantity_str_for_api.rstrip('0').rstrip('.')


                    self.trade_logger.info(f"‚úÖ Step 6.3 - Qty formatted for API: '{quantity_str_for_api}' (float: {quantity_for_api_float})")

                    if min_notional_value_str:
                        min_notional_value = float(min_notional_value_str)
                        current_notional_value = quantity_for_api_float * intended_entry_price
                        self.trade_logger.info(f"üîç Step 6.4 - Notional value check: current={current_notional_value:.2f}, required_min={min_notional_value:.2f}")
                        if current_notional_value < min_notional_value:
                            self.trade_logger.error(f"‚ùå Step 6.4 FAILED - Order notional value {current_notional_value:.2f} is below minNotionalValue {min_notional_value:.2f}")
                            return {'symbol': symbol, 'action': 'ORDER_BELOW_MIN_NOTIONAL', 'signal': signal_type, 'success': False, 'error': f'Order value {current_notional_value:.2f} below minNotional {min_notional_value:.2f}'}
                        self.trade_logger.info(f"‚úÖ Step 6.4 - Notional value check passed")
                else: 
                    self.trade_logger.warning(f"‚ö†Ô∏è Step 6 WARNING - Failed to get instrument details for {symbol}. Using default rounding.")
                    quantity_for_api_float = round(initial_raw_quantity, price_decimals_from_instrument) 
                    quantity_str_for_api = f"{quantity_for_api_float:.{price_decimals_from_instrument}f}".rstrip('0').rstrip('.')
                    if '.' in quantity_str_for_api and float(quantity_str_for_api) == int(float(quantity_str_for_api)):
                        quantity_str_for_api = str(int(float(quantity_str_for_api)))

            except Exception as e_instr:
                self.trade_logger.error(f"‚ùå Step 6 ERROR - Error getting/processing instrument info for {symbol}: {e_instr}", exc_info=True)
                quantity_for_api_float = round(initial_raw_quantity, price_decimals_from_instrument)
                quantity_str_for_api = f"{quantity_for_api_float:.{price_decimals_from_instrument}f}".rstrip('0').rstrip('.')
                if '.' in quantity_str_for_api and float(quantity_str_for_api) == int(float(quantity_str_for_api)):
                    quantity_str_for_api = str(int(float(quantity_str_for_api)))


            # –ö—Ä–æ–∫ 7: –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è quantity
            if not quantity_str_for_api or float(quantity_str_for_api) <= 0:
                self.trade_logger.error(f"‚ùå Step 7 FAILED - Final quantity for {symbol} is zero or invalid: '{quantity_str_for_api}'")
                return {'symbol': symbol, 'action': 'ZERO_FINAL_QUANTITY', 'signal': signal_type, 'success': False, 'error': f'Final API quantity zero or invalid: {quantity_str_for_api}'}
            self.trade_logger.info(f"‚úÖ Step 7 - Final order params: {signal_type} {symbol}, qty={quantity_str_for_api}, approx_value={quantity_for_api_float * intended_entry_price:.2f} USDT")
            
            # –ö—Ä–æ–∫ 8: –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            api_side = "Buy" if signal_type == "BUY" else "Sell"
            self.trade_logger.info(f"üöÄ Step 8 - About to place MARKET order: {symbol} {api_side} {quantity_str_for_api}")
            try:
                api_order_result = await self.api_manager.place_order(
                    symbol=symbol, side=api_side, qty=quantity_str_for_api, order_type="Market", position_idx=0 
                )
                self.trade_logger.info(f"üì® Step 8 - API response received: retCode={api_order_result.get('retCode') if api_order_result else 'None'}")
                if api_order_result: self.trade_logger.debug(f"Full API response: {api_order_result}")
            except Exception as e_api:
                self.trade_logger.error(f"‚ùå Step 8 CRITICAL ERROR - API call failed: {e_api}", exc_info=True)
                return {'symbol': symbol, 'action': 'API_CALL_FAILED', 'signal': signal_type, 'success': False, 'error': str(e_api)}

            # –ö—Ä–æ–∫ 9: –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
            order_id = None
            if api_order_result and api_order_result.get('retCode') == 0:
                order_id = api_order_result.get('result', {}).get('orderId')
                self.trade_logger.info(f"üéâ Step 9 - ORDER PLACED SUCCESSFULLY! {symbol} ({signal_type}), Order ID: {order_id}")
                
                delay_ms = TRADING_CONFIG.get('delay_after_market_order_ms', 2000)
                self.trade_logger.info(f"‚è≥ Waiting {delay_ms}ms before getting fill price...")
                await asyncio.sleep(delay_ms / 1000.0)

                # –ö—Ä–æ–∫ 10: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó —Ü—ñ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                actual_avg_fill_price = None
                self.trade_logger.info(f"üîç Step 10 - Getting actual fill price for {symbol} (Order ID: {order_id})...")
                for attempt in range(5): 
                    try:
                        positions_list = await self.api_manager.get_positions(symbol=symbol)
                        if positions_list:
                            for pos_item in positions_list:
                                if (pos_item.get('symbol') == symbol and 
                                    pos_item.get('side', '').lower() == api_side.lower() and 
                                    float(pos_item.get('size', "0")) > 0): 
                                    actual_avg_fill_price = float(pos_item.get('avgPrice', "0"))
                                    if actual_avg_fill_price > 0:
                                        self.trade_logger.info(f"‚úÖ Step 10 - Got actual avg entry price from get_positions for {symbol}: {actual_avg_fill_price:.{price_decimals_from_instrument}f}")
                                        break
                        if actual_avg_fill_price and actual_avg_fill_price > 0: break

                        if order_id: 
                            executions = await self.api_manager.get_execution_history(symbol=symbol, order_filter=order_id, limit=5)
                            if executions:
                                total_val, total_qty_exec = 0, 0
                                for exec_item in executions:
                                    total_val += exec_item['exec_value']
                                    total_qty_exec += exec_item['quantity']
                                if total_qty_exec > 0 :
                                    actual_avg_fill_price = total_val / total_qty_exec
                                    self.trade_logger.info(f"‚úÖ Step 10 - Got actual avg entry price from get_executions for {symbol}: {actual_avg_fill_price:.{price_decimals_from_instrument}f}")
                                    break
                        
                        if actual_avg_fill_price and actual_avg_fill_price > 0: break
                        self.trade_logger.warning(f"‚ö†Ô∏è Step 10 - Attempt {attempt+1}/5: Could not get avgPrice for {symbol}. Retrying...")
                        await asyncio.sleep(1.0 + attempt * 0.5) 
                    except Exception as e_pos:
                        self.trade_logger.error(f"‚ùå Step 10 - Error getting position/execution data: {e_pos}", exc_info=True)
                
                if not actual_avg_fill_price or actual_avg_fill_price <= 0:
                    self.trade_logger.warning(f"‚ö†Ô∏è Step 10 WARNING - Could not determine actual fill price for {symbol}. Using intended price {intended_entry_price:.{price_decimals_from_instrument}f} as fallback")
                    actual_avg_fill_price = intended_entry_price 

                # –ö—Ä–æ–∫ 11: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ SL/TP –Ω–∞ –æ—Å–Ω–æ–≤—ñ –§–ê–ö–¢–ò–ß–ù–û–á —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
                self.trade_logger.info(f"üéØ Step 11 - Calculating SL/TP for {symbol} using strategy's SL logic...")
                
                original_sl_price_from_signal = float(signal_data.get('stop_loss', 0)) # SL –∑ –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—É
                original_tp_levels_from_signal = signal_data.get('take_profits', []) # TP –∑ –¥–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—É
                atr_at_signal_time = float(signal_data.get('atr_value', 0.00001))
                if atr_at_signal_time <= 0: atr_at_signal_time = 0.00001

                sl_atr_multiplier_from_strategy = STRATEGY_CONFIG.get('sl_atr_multiplier', 1.5)
                
                final_stop_loss_price = 0.0
                if signal_type == 'BUY':
                    final_stop_loss_price = actual_avg_fill_price - (atr_at_signal_time * sl_atr_multiplier_from_strategy)
                else:  # SELL
                    final_stop_loss_price = actual_avg_fill_price + (atr_at_signal_time * sl_atr_multiplier_from_strategy)

                if signal_type == 'BUY' and final_stop_loss_price >= actual_avg_fill_price:
                    self.trade_logger.error(f"‚ùå Invalid SL for BUY {symbol}: SL {final_stop_loss_price:.{price_decimals_from_instrument}f} >= Entry {actual_avg_fill_price:.{price_decimals_from_instrument}f}")
                    final_stop_loss_price = actual_avg_fill_price * (1 - 0.01 / leverage) # –ó–º–µ–Ω—à—É—î–º–æ –Ω–∞ 1% –≤—ñ–¥ –º–∞—Ä–∂—ñ
                elif signal_type == 'SELL' and final_stop_loss_price <= actual_avg_fill_price:
                    self.trade_logger.error(f"‚ùå Invalid SL for SELL {symbol}: SL {final_stop_loss_price:.{price_decimals_from_instrument}f} <= Entry {actual_avg_fill_price:.{price_decimals_from_instrument}f}")
                    final_stop_loss_price = actual_avg_fill_price * (1 + 0.01 / leverage) # –ó–±—ñ–ª—å—à—É—î–º–æ –Ω–∞ 1% –≤—ñ–¥ –º–∞—Ä–∂—ñ
                
                self.trade_logger.info(
                    f"üìä SL Calculation Details: Signal Entry: {intended_entry_price:.{price_decimals_from_instrument}f}, "
                    f"Signal SL (from strategy): {original_sl_price_from_signal:.{price_decimals_from_instrument}f}, "
                    f"SL Distance (ATR*mult): {(atr_at_signal_time * sl_atr_multiplier_from_strategy):.{price_decimals_from_instrument}f}, "
                    f"Actual Entry: {actual_avg_fill_price:.{price_decimals_from_instrument}f}, "
                    f"Calculated New SL: {final_stop_loss_price:.{price_decimals_from_instrument}f}"
                )
                final_stop_loss_price_str = f"{final_stop_loss_price:.{price_decimals_from_instrument}f}"

                final_take_profit_levels_for_bot = []
                first_tp_price_for_exchange_str = None

                if original_tp_levels_from_signal:
                    for tp_level_index, tp_level in enumerate(original_tp_levels_from_signal):
                        tp_mult_for_level = 0
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–Ω–æ–∂–Ω–∏–∫ ATR –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è TP
                        if tp_level['type'] == 'partial_1': tp_mult_for_level = STRATEGY_CONFIG.get('first_partial_multiplier', 0.8)
                        elif tp_level['type'] == 'partial_2': tp_mult_for_level = STRATEGY_CONFIG.get('second_partial_multiplier', 1.3)
                        elif tp_level['type'] == 'partial_3': tp_mult_for_level = STRATEGY_CONFIG.get('third_partial_multiplier', 1.8)
                        elif tp_level['type'] == 'final':
                            adaptive_params_sig = signal_data.get('adaptive_params_used', {})
                            volume_boost_sig = signal_data.get('volume_boost_data', {})
                            tp_mult_base_final = adaptive_params_sig.get('tp_mult', STRATEGY_CONFIG.get('mixed_tp_mult', 2.2))
                            tp_mult_boost_final = volume_boost_sig.get('tp_multiplier_boost', 1.0)
                            tp_extension_final = volume_boost_sig.get('final_tp_extension', 1.0)
                            tp_mult_for_level = tp_mult_base_final * tp_mult_boost_final * tp_extension_final
                        
                        new_tp_price_val = 0.0
                        if signal_type == 'BUY':
                            new_tp_price_val = actual_avg_fill_price + (atr_at_signal_time * tp_mult_for_level)
                        else: # SELL
                            new_tp_price_val = actual_avg_fill_price - (atr_at_signal_time * tp_mult_for_level)

                        new_tp_price_val_str = f"{new_tp_price_val:.{price_decimals_from_instrument}f}"
                        final_take_profit_levels_for_bot.append({
                            **tp_level, 
                            'price': float(new_tp_price_val_str), 
                            'hit': False 
                        })
                        if tp_level_index == 0: # –ü–µ—Ä—à–∏–π TP –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ
                            first_tp_price_for_exchange_str = new_tp_price_val_str
                
                self.trade_logger.info(
                    f"‚úÖ Step 11 (Post SL/TP Calc) - Final SL: {final_stop_loss_price_str}, "
                    f"First TP for exchange: {first_tp_price_for_exchange_str or 'N/A'}, "
                    f"Full TP Levels: {final_take_profit_levels_for_bot}"
                )

                # –ö—Ä–æ–∫ 12: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è SL/TP –Ω–∞ –±—ñ—Ä–∂—ñ
                if float(final_stop_loss_price_str) > 0:
                    self.trade_logger.info(f"üéØ Step 12 - Setting SL ({final_stop_loss_price_str}) & First TP ({first_tp_price_for_exchange_str or 'None'}) on exchange for {symbol}...")
                    try:
                        sl_tp_set_response = await self.api_manager.set_trading_stop_for_position(
                            symbol=symbol,
                            stop_loss=final_stop_loss_price_str,
                            take_profit=first_tp_price_for_exchange_str if first_tp_price_for_exchange_str else None,
                            position_idx=0,
                            tpsl_mode="Full" 
                        )
                        if sl_tp_set_response and sl_tp_set_response.get('retCode') == 0:
                            self.trade_logger.info(f"‚úÖ Step 12 - SL/TP set successfully for {symbol}")
                        else:
                            self.trade_logger.error(f"‚ùå Step 12 FAILED - Could not set SL/TP for {symbol}. Response: {sl_tp_set_response}")
                    except Exception as e_sltp:
                        self.trade_logger.error(f"‚ùå Step 12 ERROR - Exception setting SL/TP: {e_sltp}", exc_info=True)
                
                # –ö—Ä–æ–∫ 13: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –≤ –±–æ—Ç
                self.trade_logger.info(f"üíæ Step 13 - Saving position to bot memory for {symbol}...")
                self.positions[symbol] = {
                    'entry_price': actual_avg_fill_price, 
                    'initial_entry_price': actual_avg_fill_price,  # ‚úÖ NEW: Backup entry price for recovery
                    'quantity': quantity_for_api_float, 
                    'initial_quantity': quantity_for_api_float, 
                    'side': signal_type,
                    'initial_stop_loss': float(final_stop_loss_price_str), 
                    'current_stop_loss': float(final_stop_loss_price_str),
                    'take_profit_levels': final_take_profit_levels_for_bot, 
                    'initial_atr_at_entry': atr_at_signal_time, 
                    'first_partial_tp_hit': False,
                    'breakeven_applied': False, 
                    'volume_divergence_exit_done': False,
                    'trailing_stop_active': False,
                    'highest_high_since_entry': actual_avg_fill_price if signal_type == 'BUY' else -1,
                    'lowest_low_since_entry': actual_avg_fill_price if signal_type == 'SELL' else float('inf'),
                    'highest_high_since_trail_active': -1, 
                    'lowest_low_since_trail_active': float('inf'), 
                    'entry_timestamp': datetime.now(timezone.utc),
                    'original_signal_data': signal_data, 
                    'exchange_order_id': order_id 
                }
                
                # –ö—Ä–æ–∫ 14: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è trade log —ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                trade_log_data_for_telegram = {
                    'action': f'OPEN_{signal_type}', 
                    'symbol': symbol, 'side': signal_type, 
                    'price': actual_avg_fill_price, 
                    'entry_price': actual_avg_fill_price, 
                    'quantity': quantity_for_api_float, 
                    'total_value_approx': quantity_for_api_float * actual_avg_fill_price, 
                    'stop_loss': float(final_stop_loss_price_str),
                    'take_profits': final_take_profit_levels_for_bot, 
                    'confidence': signal_data.get('confidence'), 
                    'atr_at_entry': atr_at_signal_time,
                    'reason': signal_data.get('reason', 'Signal triggered'),
                    'volume_surge_active': signal_data.get('volume_surge_active', False),
                    'super_volume_surge_active': signal_data.get('super_volume_surge_active', False),
                    'exchange_order_id': order_id
                }
                self.trade_logger.info(f"üì± Step 14 - Sending Telegram notification for {symbol}...")
                await self.telegram.send_trade_notification(trade_log_data_for_telegram) 
                self.trade_logger.info(f"üéâ EXECUTE_TRADE SUCCESS: {symbol} trade completed successfully!")
                return {'symbol': symbol, 'action': 'REAL_TRADE_OPENED_WITH_SLTP_SET', 'signal': signal_type, 'success': True, 'trade_data': trade_log_data_for_telegram, 'order_id': order_id}
            else: 
                failed_request_params = api_order_result.get('retExtInfo', {}).get('req', api_order_result.get('request_params', {})) if api_order_result else {}
                error_code_api = api_order_result.get('retCode') if api_order_result else 'None'
                error_msg_api_text = api_order_result.get('retMsg', 'Unknown error') if api_order_result else 'No API response'
                
                error_message_log = (f"‚ùå Step 9 FAILED - Could not place order for {symbol} ({signal_type}). API Error: {error_msg_api_text} (Code: {error_code_api})")
                if failed_request_params: error_message_log += f" Request params: {failed_request_params}"
                self.trade_logger.error(error_message_log)
                
                await self.telegram.send_error_notification({
                    'type': 'EXCHANGE_MARKET_ORDER_FAILED', 'message': error_message_log, 
                    'symbol': symbol, 'action': signal_type, 'api_response': str(api_order_result) 
                })
                return {'symbol': symbol, 'action': 'ERROR_PLACING_MARKET_EXCHANGE_ORDER', 'signal': signal_type, 'success': False, 'error': str(api_order_result)}
                
        except Exception as e:
            self.trade_logger.critical(f"üí• EXECUTE_TRADE CRITICAL ERROR for {symbol}: {e}", exc_info=True)
            await self.telegram.send_error_notification({
                'type': 'TRADE_ENTRY_CRITICAL_ERROR', 'message': str(e),
                'symbol': symbol, 'action': signal_data.get('signal', 'Unknown')
            })
            return {'symbol': symbol, 'action': 'ERROR_ENTRY_CRITICAL', 'signal': signal_data.get('signal'), 'success': False, 'error': str(e)}

    async def manage_active_position(self, symbol: str, position_data_arg: Dict[str, Any], latest_candle: Dict[str, Any]):
        # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        try:
            # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ
            exchange_positions = await self.api_manager.get_positions(symbol=symbol)
            position_exists_on_exchange = False
            
            if exchange_positions:
                for pos in exchange_positions:
                    if (pos.get('symbol') == symbol and 
                        float(pos.get('size', 0)) > 0.000001):
                        position_exists_on_exchange = True
                        break
            
            if not position_exists_on_exchange:
                # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–º—ñ—Å—Ç—å –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                if symbol in self.positions:
                    closure_analyzed = await self.analyze_and_notify_position_closure(symbol, self.positions[symbol])
                    if not closure_analyzed:
                        # –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ–Ω—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                        await self.sync_single_position_with_history(symbol)
                else:
                    # –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ - –∑–≤–∏—á–∞–π–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
                    self.trade_logger.warning(f"‚ö†Ô∏è –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê: {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ")
                    await self.sync_single_position_with_history(symbol)
                return
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {symbol}: {e}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ª–æ–∫–∞–ª—å–Ω–æ
        if symbol not in self.positions:
            self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ manage_active_position –¥–ª—è {symbol}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ self.positions.")
            return

        current_candle_close_price = float(latest_candle['close_price'])
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ self.positions
        if symbol not in self.positions: # –©–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —è–∫—â–æ —Å–∏–º–≤–æ–ª –≤–∏–¥–∞–ª–∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ self.positions –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö. –ü—Ä–æ–ø—É—Å–∫ manage_active_position.")
            return
        position_data = self.positions[symbol] 

        if position_data.get('quantity', 0) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
            self.logger.debug(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –º–∞—î –Ω—É–ª—å–æ–≤—É/–º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å ({position_data.get('quantity', 0):.8f}) –≤ self.positions –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é. –í–∏–¥–∞–ª–µ–Ω–Ω—è, —è–∫—â–æ —â–µ —ñ—Å–Ω—É—î.")
            if symbol in self.positions:
                del self.positions[symbol]
            return
        
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –±—ñ—Ä–∂–µ—é
            exchange_position_list = await self.api_manager.get_positions(symbol=symbol)
            actual_exchange_pos_details = None
            if exchange_position_list:
                for pos_item in exchange_position_list:
                    if (pos_item.get('symbol') == symbol and 
                        float(pos_item.get('size', "0")) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)):
                        actual_exchange_pos_details = pos_item
                        break
            
            if symbol not in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
                self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ self.positions –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±—ñ—Ä–∂—ñ (manage_active_position). –ü—Ä–æ–ø—É—Å–∫.")
                return

            if not actual_exchange_pos_details:
                self.trade_logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ (manage_active_position). –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é...")
                # –î–µ–ª–µ–≥—É—î–º–æ –æ–±—Ä–æ–±–∫—É sync_single_position_with_history
                await self.sync_single_position_with_history(symbol)
                
                # –ü—ñ—Å–ª—è sync_single_position_with_history –ø–æ–∑–∏—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ self.positions
                if symbol not in self.positions:
                    self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –æ–±—Ä–æ–±–ª–µ–Ω–∞ (–π–º–æ–≤—ñ—Ä–Ω–æ, –∑–∞–∫—Ä–∏—Ç–∞) —á–µ—Ä–µ–∑ sync_single_position_with_history –≤ manage_active_position. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")
                    return # –í–∞–∂–ª–∏–≤–æ –≤–∏–π—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ—ó –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
                # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –≤—Å–µ —â–µ —î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –±—É–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞, –∞ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞), –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ manage_active_position
                # –æ–Ω–æ–≤–ª—é—î–º–æ position_data, –æ—Å–∫—ñ–ª—å–∫–∏ sync_single_position_with_history –º—ñ–≥ —ó—ó –∑–º—ñ–Ω–∏—Ç–∏
                position_data = self.positions[symbol]
            else:
                # –ü–æ–∑–∏—Ü—ñ—è —î –Ω–∞ –±—ñ—Ä–∂—ñ, –ø—Ä–æ–≤–æ–¥–∏–º–æ —à–≤–∏–¥–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞ SL
                exchange_qty = float(actual_exchange_pos_details.get('size', "0"))
                exchange_side_api = actual_exchange_pos_details.get('side', "")
                local_bot_signal_side_sync = position_data['side']

                if not ((local_bot_signal_side_sync == 'BUY' and exchange_side_api == 'Buy') or \
                        (local_bot_signal_side_sync == 'SELL' and exchange_side_api == 'Sell')):
                    self.trade_logger.warning(f"–†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –Ω–∞–ø—Ä—è–º–∫—É –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è {symbol} (–õ–æ–∫–∞–ª—å–Ω–æ: {local_bot_signal_side_sync}, –ë—ñ—Ä–∂–∞: {exchange_side_api}). –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó.")
                    await self.sync_single_position_with_history(symbol)
                    if symbol not in self.positions:
                        self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø—ñ—Å–ª—è —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–∫—É (manage_active_position). –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
                        return
                    position_data = self.positions[symbol] # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–æ–≤—É, —á–∏ –ø–æ–∑–∏—Ü—ñ—è —â–µ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è –º–æ–∂–ª–∏–≤–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                if symbol not in self.positions: return

                if abs(position_data['quantity'] - exchange_qty) > TRADING_CONFIG.get('sync_tolerance_qty', 0.0000001):
                    self.trade_logger.warning(
                        f"–†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è {symbol} (manage_active_position). "
                        f"–õ–æ–∫–∞–ª—å–Ω–æ: {position_data['quantity']:.8f}, "
                        f"–ë—ñ—Ä–∂–∞: {exchange_qty:.8f}. –û–Ω–æ–≤–ª—é—é –ª–æ–∫–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å."
                    )
                    position_data['quantity'] = exchange_qty
                
                exchange_sl_str = actual_exchange_pos_details.get('stopLoss', "0")
                if exchange_sl_str and float(exchange_sl_str) > 0:
                    exchange_sl_float = float(exchange_sl_str)
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                    price_decimals_local = 8
                    instrument_details_local = await self.api_manager.get_instrument_info(symbol)
                    if instrument_details_local:
                        price_filter_local = instrument_details_local.get('priceFilter', {})
                        tick_size_str_local = price_filter_local.get('tickSize')
                        if tick_size_str_local and '.' in tick_size_str_local:
                            price_decimals_local = len(tick_size_str_local.split('.')[1].rstrip('0'))
                        elif not tick_size_str_local or '.' not in tick_size_str_local : # 0 or 1
                            price_decimals_local = 0

                    if abs(round(position_data['current_stop_loss'], price_decimals_local) - round(exchange_sl_float, price_decimals_local)) > (10**(-price_decimals_local))/2 : # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ª–æ–≤–∏–Ω–æ—é —Ç—ñ–∫—É
                        self.trade_logger.info(
                            f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è SL –¥–ª—è {symbol} –∑ –±—ñ—Ä–∂—ñ (manage_active_position): {exchange_sl_float:.{price_decimals_local}f} "
                            f"(–±—É–≤ {position_data['current_stop_loss']:.{price_decimals_local}f})"
                        )
                        position_data['current_stop_loss'] = exchange_sl_float
        
        except Exception as e_sync:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—ó {symbol} –∑ –±—ñ—Ä–∂–µ—é (manage_active_position): {e_sync}", exc_info=True)
            await self.telegram.send_error_notification({
                'type': 'POSITION_SYNC_ERROR_MANAGE',
                'message': f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó {symbol} (manage_active_position): {e_sync}",
                'symbol': symbol
            })

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –±–ª–æ–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        if symbol not in self.positions or self.positions[symbol].get('quantity', 0) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
            self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –Ω—É–ª—å–æ–≤–∞ –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó (manage_active_position). –ó–∞–≤–µ—Ä—à—É—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")
            if symbol in self.positions and self.positions[symbol].get('quantity', 0) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001) :
                del self.positions[symbol] # –í–∏–¥–∞–ª—è—î–º–æ, —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–ª–∞ –Ω—É–ª—å–æ–≤–æ—é/–º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ position_data —Ç—É—Ç, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–∏–º–∏ –¥–∞–Ω–∏–º–∏ –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        position_data = self.positions[symbol]
        bot_signal_side = position_data['side']
        current_high = float(latest_candle['high_price'])
        current_low = float(latest_candle['low_price'])
        current_atr = float(latest_candle.get('atr', position_data.get('initial_atr_at_entry', 0.00001)))
        if current_atr <= 0: current_atr = max(position_data.get('initial_atr_at_entry', 0.00001), 0.00001)
        
        if bot_signal_side == 'BUY':
            position_data['highest_high_since_entry'] = max(
                position_data.get('highest_high_since_entry', current_high), current_high
            )
        else: # SELL
            position_data['lowest_low_since_entry'] = min(
                position_data.get('lowest_low_since_entry', current_low), current_low
            )
        
        sl_hit_price = 0.0
        sl_triggered_by_bot_logic = False
        if bot_signal_side == 'BUY' and current_low <= position_data['current_stop_loss']:
            sl_hit_price = position_data['current_stop_loss']
            sl_triggered_by_bot_logic = True
        elif bot_signal_side == 'SELL' and current_high >= position_data['current_stop_loss']:
            sl_hit_price = position_data['current_stop_loss']
            sl_triggered_by_bot_logic = True
        
        if sl_triggered_by_bot_logic:
            self.trade_logger.info(
                f"–õ–û–ì–Ü–ö–ê –ë–û–¢–ê: Stop Loss –¥–ª—è {symbol} ({bot_signal_side}) "
                f"–º–∞–≤ –±–∏ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ {sl_hit_price:.6f} (Low/High: {current_low:.6f}/{current_high:.6f})"
            )
            await self._close_position(symbol, current_candle_close_price, "Stop Loss Hit (Bot Logic Triggered)")
            return 
        
        if symbol not in self.positions: return # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è SL
        
        position_updated_after_tp_or_logic = False # –§–ª–∞–≥, —â–æ SL/TP –º–æ–≥–ª–∏ –∑–º—ñ–Ω–∏—Ç–∏—Å—è
        for tp_level_index, tp_level in enumerate(list(position_data.get('take_profit_levels', []))):
            if symbol not in self.positions or self.positions[symbol]['quantity'] <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                break 
            if tp_level.get('hit', False):
                continue
            
            current_pos_qty_for_tp_calc = self.positions[symbol]['quantity'] 
            tp_price = tp_level['price']
            close_percentage = tp_level['percentage_to_close']
            qty_to_close_for_this_tp_based_on_initial = self.positions[symbol]['initial_quantity'] * (close_percentage / 100.0)
            actual_qty_to_close_now = min(abs(qty_to_close_for_this_tp_based_on_initial), abs(current_pos_qty_for_tp_calc))
            
            if actual_qty_to_close_now <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                continue
            
            tp_triggered_by_bot_logic = False
            if bot_signal_side == 'BUY' and current_high >= tp_price:
                tp_triggered_by_bot_logic = True
            elif bot_signal_side == 'SELL' and current_low <= tp_price:
                tp_triggered_by_bot_logic = True
            
            if tp_triggered_by_bot_logic:
                self.trade_logger.info(
                    f"–õ–û–ì–Ü–ö–ê –ë–û–¢–ê: {tp_level['type']} TP –¥–ª—è {symbol} ({bot_signal_side}) –Ω–∞ {tp_price:.6f} "
                    f"(Low/High: {current_low:.6f}/{current_high:.6f})"
                )
                await self._close_position(
                    symbol, tp_price, f"{tp_level['type']} Hit", 
                    quantity_to_close=actual_qty_to_close_now
                )
                position_updated_after_tp_or_logic = True
                
                if symbol not in self.positions: return 
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω TP –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
                # self.positions –¥–æ—Å—Ç—É–ø–Ω–∏–π, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∏–π—à–ª–∏ –±, —è–∫–±–∏ —Å–∏–º–≤–æ–ª –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π
                self.positions[symbol]['take_profit_levels'][tp_level_index]['hit'] = True
                self.trade_logger.info(f"TP —Ä—ñ–≤–µ–Ω—å {tp_level['type']} –¥–ª—è {symbol} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'hit'.")
                
                if (tp_level['type'] == 'partial_1' and 
                    not self.positions[symbol].get('first_partial_tp_hit', False)):
                    self.positions[symbol]['first_partial_tp_hit'] = True
                
                break # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É TP, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ SL/–Ω–∞—Å—Ç—É–ø–Ω–∏–π TP
            
        if symbol not in self.positions: return # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è TP

        new_sl_price_to_set = position_data['current_stop_loss']
        sl_update_reason = "current" 

        if (STRATEGY_CONFIG.get('use_breakeven', True) and
            position_data.get('first_partial_tp_hit', False) and
            not position_data.get('breakeven_applied', False)):
            potential_be_sl = await self._calculate_breakeven_sl_price(symbol, position_data)
            if potential_be_sl is not None:
                if (bot_signal_side == 'BUY' and potential_be_sl > new_sl_price_to_set) or \
                (bot_signal_side == 'SELL' and potential_be_sl < new_sl_price_to_set):
                    new_sl_price_to_set = potential_be_sl
                    self.positions[symbol]['breakeven_applied'] = True
                    sl_update_reason = "breakeven"
                    position_updated_after_tp_or_logic = True

        if symbol not in self.positions: return # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è BE

        should_activate_trailing = (
            position_data.get('first_partial_tp_hit', False) or
            (not STRATEGY_CONFIG.get('use_triple_partial_tp', True)) # –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 3 TP, —Ç—Ä–µ–π–ª—ñ–Ω–≥ –º–æ–∂–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏—Å—è —Ä–∞–Ω—ñ—à–µ
        )
        
        if (STRATEGY_CONFIG.get('use_trailing_stop', True) and
            should_activate_trailing and
            position_data.get('quantity', 0) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)):
            
            if not position_data.get('trailing_stop_active', False):
                self.positions[symbol]['trailing_stop_active'] = True
                self.positions[symbol]['highest_high_since_trail_active'] = current_high if bot_signal_side == 'BUY' else position_data.get('entry_price', current_high)
                self.positions[symbol]['lowest_low_since_trail_active'] = current_low if bot_signal_side == 'SELL' else position_data.get('entry_price', current_low)
                self.trade_logger.info(
                    f"–†–ï–ê–õ–¨–ù–ò–ô: Trailing Stop –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è {symbol} ({bot_signal_side}). "
                    f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π SL: {position_data['current_stop_loss']:.6f}"
                )
                position_updated_after_tp_or_logic = True

            if self.positions[symbol].get('trailing_stop_active', False):
                if bot_signal_side == 'BUY':
                    self.positions[symbol]['highest_high_since_trail_active'] = max(
                        self.positions[symbol].get('highest_high_since_trail_active', current_high), current_high
                    )
                else: # SELL
                    self.positions[symbol]['lowest_low_since_trail_active'] = min(
                        self.positions[symbol].get('lowest_low_since_trail_active', current_low), current_low
                    )
                
                potential_trail_sl = await self._calculate_trailing_sl_price(symbol, self.positions[symbol], current_atr)
                if potential_trail_sl is not None:
                    if (bot_signal_side == 'BUY' and potential_trail_sl > new_sl_price_to_set) or \
                    (bot_signal_side == 'SELL' and potential_trail_sl < new_sl_price_to_set):
                        new_sl_price_to_set = potential_trail_sl
                        sl_update_reason = "trailing"
                        position_updated_after_tp_or_logic = True
        
        if symbol not in self.positions: return # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è —Ç—Ä–µ–π–ª—ñ–Ω–≥—É

        if position_updated_after_tp_or_logic: 
            if symbol in self.positions and self.positions[symbol]['quantity'] > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                await self._update_active_tpsl_on_exchange(symbol, new_sl_price_to_set, sl_update_reason)
            else: return

        if symbol not in self.positions: return 

        current_pos_data_for_div = self.positions[symbol] 
        if (STRATEGY_CONFIG.get('use_volume_divergence', True) and
            not current_pos_data_for_div.get('volume_divergence_exit_done', False) and
            current_pos_data_for_div.get('quantity', 0) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)):
            
            bullish_div = latest_candle.get('bullish_vol_divergence', False)
            bearish_div = latest_candle.get('bearish_vol_divergence', False)
            close_percent_div = STRATEGY_CONFIG.get('volume_divergence_close_percent', 50.0)
            qty_to_close_div = current_pos_data_for_div['quantity'] * (close_percent_div / 100.0)
            
            if qty_to_close_div > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                div_triggered = False
                if bot_signal_side == 'BUY' and bearish_div: div_triggered = True
                elif bot_signal_side == 'SELL' and bullish_div: div_triggered = True
                
                if div_triggered:
                    self.trade_logger.info(f"–õ–û–ì–Ü–ö–ê –ë–û–¢–ê: Volume Divergence –¥–ª—è {symbol} ({bot_signal_side}).")
                    await self._close_position(
                        symbol, current_candle_close_price, "Volume Divergence Exit", 
                        quantity_to_close=qty_to_close_div
                    )
                    if symbol not in self.positions: return
                    self.positions[symbol]['volume_divergence_exit_done'] = True
                    if self.positions[symbol]['quantity'] > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                        await self._update_active_tpsl_on_exchange(symbol, self.positions[symbol]['current_stop_loss'], "divergence_partial_close")
    
    async def _calculate_breakeven_sl_price(self, symbol: str, position_data: Dict[str, Any]) -> Optional[float]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ü—ñ–Ω—É SL –¥–ª—è –±–µ–∑–∑–±–∏—Ç–∫—É, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –Ω–∞–ø—Ä—è–º–æ–∫ —Ç–∞ —Å–ø—Ä–µ–¥."""
        entry_price = position_data['entry_price']
        bot_signal_side = position_data['side']
        initial_atr = position_data.get('initial_atr_at_entry', 0.00001)
        if initial_atr <= 0: initial_atr = 0.00001

        atr_buffer_mult = STRATEGY_CONFIG.get('breakeven_buffer', 0.05) # 5% –≤—ñ–¥ ATR —è–∫ –±—É—Ñ–µ—Ä
        atr_based_buffer = initial_atr * atr_buffer_mult

        tick_size = 0.00000001 # Default, –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
        price_decimals = 8
        instrument_details = await self.api_manager.get_instrument_info(symbol)
        if instrument_details:
            price_filter = instrument_details.get('priceFilter', {})
            tick_size_str = price_filter.get('tickSize')
            if tick_size_str:
                try:
                    tick_size = float(tick_size_str)
                    if '.' in tick_size_str: price_decimals = len(tick_size_str.split('.')[1].rstrip('0'))
                    else: price_decimals = 0
                except ValueError:
                    self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ tickSize '{tick_size_str}' –Ω–∞ float –¥–ª—è {symbol} (BE)")
        
        min_buffer_ticks = STRATEGY_CONFIG.get('breakeven_min_buffer_ticks', 3)
        tick_based_min_buffer = tick_size * min_buffer_ticks
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à–∏–π –∑ –¥–≤–æ—Ö –±—É—Ñ–µ—Ä—ñ–≤: ATR-based –∞–±–æ tick-based
        final_breakeven_buffer_value = max(atr_based_buffer, tick_based_min_buffer)

        proposed_new_sl_price = 0.0
        if bot_signal_side == 'BUY':
            # SL –¥–ª—è Long –º–∞—î –±—É—Ç–∏ —Ç—Ä–æ—Ö–∏ –í–ò–©–ï —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
            proposed_new_sl_price = entry_price + final_breakeven_buffer_value
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–æ–≤–∏–π SL –¥—ñ–π—Å–Ω–æ –∫—Ä–∞—â–∏–π (–≤–∏—â–∏–π) –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π SL
            if proposed_new_sl_price <= position_data['current_stop_loss']:
                self.trade_logger.debug(f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –Ω–µ –∫—Ä–∞—â–∏–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π {position_data['current_stop_loss']:.{price_decimals}f}.")
                return None
            if proposed_new_sl_price <= entry_price + tick_size: # –ú–∞—î –±—É—Ç–∏ —Ö–æ—á–∞ –± –Ω–∞ 1 —Ç—ñ–∫ –≤–∏—â–µ –≤—Ö–æ–¥—É
                self.trade_logger.warning(f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É {entry_price:.{price_decimals}f}.")
                return None
        elif bot_signal_side == 'SELL':
            # SL –¥–ª—è Short –º–∞—î –±—É—Ç–∏ —Ç—Ä–æ—Ö–∏ –ù–ò–ñ–ß–ï —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
            proposed_new_sl_price = entry_price - final_breakeven_buffer_value
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–æ–≤–∏–π SL –¥—ñ–π—Å–Ω–æ –∫—Ä–∞—â–∏–π (–Ω–∏–∂—á–∏–π) –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π SL
            if proposed_new_sl_price >= position_data['current_stop_loss']:
                self.trade_logger.debug(f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –Ω–µ –∫—Ä–∞—â–∏–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π {position_data['current_stop_loss']:.{price_decimals}f}.")
                return None
            if proposed_new_sl_price >= entry_price - tick_size: # –ú–∞—î –±—É—Ç–∏ —Ö–æ—á–∞ –± –Ω–∞ 1 —Ç—ñ–∫ –Ω–∏–∂—á–µ –≤—Ö–æ–¥—É
                self.trade_logger.warning(f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É {entry_price:.{price_decimals}f}.")
                return None
                
        if proposed_new_sl_price == 0.0: return None

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ —Ä–∏–Ω–∫—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é –±—É—Ñ–µ—Ä—É
        market_price = await self._get_current_market_price(symbol)
        if market_price == 0: market_price = entry_price # Fallback, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É

        # Use symbol-specific buffer calculation
        safety_buffer_market = self._calculate_symbol_specific_buffer(symbol, tick_size, market_price)

        if bot_signal_side == 'BUY':
            if proposed_new_sl_price >= market_price - safety_buffer_market:
                self.trade_logger.warning(f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–≤–∏—â–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} (–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f}).")
                return None
        elif bot_signal_side == 'SELL':
            if proposed_new_sl_price <= market_price + safety_buffer_market:
                self.trade_logger.warning(f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–Ω–∏–∂—á–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} (–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f}).")
                return None
                
        return round(proposed_new_sl_price, price_decimals)

    async def _calculate_trailing_sl_price(self, symbol: str, position_data: Dict[str, Any], current_atr: float) -> Optional[float]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ü—ñ–Ω—É –¥–ª—è —Ç—Ä–µ–π–ª—ñ–Ω–≥ —Å—Ç–æ–ø—É."""
        bot_signal_side = position_data['side']
        entry_price = position_data['entry_price'] 
        current_sl_price = position_data['current_stop_loss']
        
        if current_atr <= 0: current_atr = max(position_data.get('initial_atr_at_entry', 0.00001), 0.00001)

        trail_atr_mult = STRATEGY_CONFIG.get('trail_atr_mult', 0.7)
        trail_value = current_atr * trail_atr_mult

        tick_size = 0.00000001 
        price_decimals = 8
        instrument_details = await self.api_manager.get_instrument_info(symbol)
        if instrument_details:
            price_filter = instrument_details.get('priceFilter', {})
            tick_size_str = price_filter.get('tickSize')
            if tick_size_str:
                try:
                    tick_size = float(tick_size_str)
                    if '.' in tick_size_str: price_decimals = len(tick_size_str.split('.')[1].rstrip('0'))
                    else: price_decimals = 0
                except ValueError:
                    self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ tickSize '{tick_size_str}' (—Ç—Ä–µ–π–ª—ñ–Ω–≥) –¥–ª—è {symbol}")

        proposed_new_sl_price = current_sl_price # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ SL
        reference_price_for_trail = 0.0

        if bot_signal_side == 'BUY':
            reference_price_for_trail = position_data.get('highest_high_since_trail_active', position_data.get('highest_high_since_entry', entry_price))
            calculated_sl = reference_price_for_trail - trail_value
            if calculated_sl > current_sl_price: # –ù–æ–≤–∏–π SL –º–∞—î –±—É—Ç–∏ –≤–∏—â–∏–º (–∫—Ä–∞—â–∏–º)
                proposed_new_sl_price = calculated_sl
            else: 
                self.trade_logger.debug(f"TRAIL SL SKIP ({symbol} Long): –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π SL {calculated_sl:.{price_decimals}f} –Ω–µ –ø–æ–∫—Ä–∞—â—É—î –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}.")
                return None 
        elif bot_signal_side == 'SELL':
            reference_price_for_trail = position_data.get('lowest_low_since_trail_active', position_data.get('lowest_low_since_entry', entry_price))
            calculated_sl = reference_price_for_trail + trail_value
            if calculated_sl < current_sl_price: # –ù–æ–≤–∏–π SL –º–∞—î –±—É—Ç–∏ –Ω–∏–∂—á–∏–º (–∫—Ä–∞—â–∏–º)
                proposed_new_sl_price = calculated_sl
            else: 
                self.trade_logger.debug(f"TRAIL SL SKIP ({symbol} Short): –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π SL {calculated_sl:.{price_decimals}f} –Ω–µ –ø–æ–∫—Ä–∞—â—É—î –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}.")
                return None 
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ —Ä–∏–Ω–∫—É
        market_price = await self._get_current_market_price(symbol)
        if market_price == 0: market_price = reference_price_for_trail 

        min_sl_dist_market_ticks = TRADING_CONFIG.get('min_sl_market_distance_tick_multiplier', 5)
        safety_buffer_market = tick_size * min_sl_dist_market_ticks

        if bot_signal_side == 'BUY':
            if proposed_new_sl_price >= market_price - safety_buffer_market:
                self.trade_logger.warning(f"TRAIL SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–≤–∏—â–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} (–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f}).")
                return None
        elif bot_signal_side == 'SELL':
            if proposed_new_sl_price <= market_price + safety_buffer_market:
                self.trade_logger.warning(f"TRAIL SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–Ω–∏–∂—á–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} (–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f}).")
                return None
        
        if abs(proposed_new_sl_price - current_sl_price) < tick_size / 2: # –Ø–∫—â–æ –∑–º—ñ–Ω–∞ –º–µ–Ω—à–∞ –∑–∞ –ø—ñ–≤—Ç—ñ–∫–∞
            self.trade_logger.debug(f"TRAIL SL SKIP ({symbol}): –ó–º—ñ–Ω–∞ SL ({proposed_new_sl_price:.{price_decimals}f} vs {current_sl_price:.{price_decimals}f}) –º–µ–Ω—à–∞ –∑–∞ –ø—ñ–≤—Ç—ñ–∫–∞.")
            return None

        return round(proposed_new_sl_price, price_decimals)

    async def _update_active_tpsl_on_exchange(self, symbol: str, new_sl_price: float, reason_for_update: str):
        """–û–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω–∏–π SL —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π TP –Ω–∞ –±—ñ—Ä–∂—ñ."""
        if symbol not in self.positions or self.positions[symbol]['quantity'] <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001): # Use config for threshold
            self.logger.debug(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –¥–ª—è {symbol} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –ø–æ–∑–∏—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω—É–ª—å–æ–≤–∞.")
            return

        position_data = self.positions[symbol]
        
        next_active_tp_level = None
        for tp_level_data in position_data.get('take_profit_levels', []):
            if not tp_level_data.get('hit', False):
                next_active_tp_level = tp_level_data
                break
        
        next_tp_price_str = None
        price_decimals_from_instrument = 6 
        instrument_details = await self.api_manager.get_instrument_info(symbol)
        if instrument_details:
            price_filter = instrument_details.get('priceFilter', {})
            tick_size_str = price_filter.get('tickSize')
            if tick_size_str:
                if '.' in tick_size_str: 
                    price_decimals_from_instrument = len(tick_size_str.split('.')[1].rstrip('0'))
                else: 
                    price_decimals_from_instrument = 0
            
        if next_active_tp_level and 'price' in next_active_tp_level:
            next_tp_price_to_set = float(next_active_tp_level['price'])
            if next_tp_price_to_set > 0: # Only set TP if price is valid
                next_tp_price_str = f"{next_tp_price_to_set:.{price_decimals_from_instrument}f}"
            else:
                self.logger.warning(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ TP –¥–ª—è {symbol} –Ω–µ–¥—ñ–π—Å–Ω–∞ ({next_tp_price_to_set}). TP –Ω–µ –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                next_tp_price_str = None # Ensure it's None if price is invalid

        new_sl_price_str = f"{new_sl_price:.{price_decimals_from_instrument}f}"

        current_sl_on_record = position_data.get('current_stop_loss')
        current_tp_on_record = position_data.get('current_active_tp_price') # Assumes this field exists

        current_sl_on_record_str = None
        if current_sl_on_record is not None:
            current_sl_on_record_str = f"{float(current_sl_on_record):.{price_decimals_from_instrument}f}"

        current_tp_on_record_str = None
        if current_tp_on_record is not None:
            current_tp_on_record_str = f"{float(current_tp_on_record):.{price_decimals_from_instrument}f}"
        
        # Enhanced redundancy check with better logging
        sl_unchanged = (current_sl_on_record_str == new_sl_price_str)
        
        tp_unchanged = False
        if next_tp_price_str is None and current_tp_on_record_str is None: # Both are None
            tp_unchanged = True
        elif next_tp_price_str is not None and current_tp_on_record_str is not None: # Both have values
            tp_unchanged = (current_tp_on_record_str == next_tp_price_str)
        # Else (one is None and other is not), they are different, so tp_unchanged remains False

        # Add debug logging for redundancy check
        self.trade_logger.debug(
            f"Redundancy check for {symbol}: SL unchanged={sl_unchanged} "
            f"(current={current_sl_on_record_str} vs new={new_sl_price_str}), "
            f"TP unchanged={tp_unchanged} "
            f"(current={current_tp_on_record_str} vs new={next_tp_price_str})"
        )

        if sl_unchanged and tp_unchanged:
            self.trade_logger.info(
                f"TP/SL –¥–ª—è {symbol} –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è (–ü–æ—Ç–æ—á–Ω–∏–π SL: {current_sl_on_record_str}, –ù–æ–≤–∏–π SL: {new_sl_price_str}; "
                f"–ü–æ—Ç–æ—á–Ω–∏–π TP: {current_tp_on_record_str or 'None'}, –ù–æ–≤–∏–π TP: {next_tp_price_str or 'None'}). "
                f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {reason_for_update}"
            )
            # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ –¥–æ–¥–∞—î–º–æ timestamp –¥–ª—è redundancy tracking
            position_data['current_stop_loss'] = float(new_sl_price_str)
            if next_tp_price_str:
                position_data['current_active_tp_price'] = float(next_tp_price_str)
            else:
                position_data['current_active_tp_price'] = None
            position_data['last_tpsl_update_reason'] = reason_for_update
            position_data['last_tpsl_update_time'] = datetime.now(timezone.utc)
            position_data['redundant_calls_prevented'] = position_data.get('redundant_calls_prevented', 0) + 1
            return

        self.trade_logger.info(
            f"–†–ï–ê–õ–¨–ù–ò–ô (–û–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –¥–ª—è {symbol} —á–µ—Ä–µ–∑ '{reason_for_update}'): "
            f"–ù–æ–≤–∏–π SL: {new_sl_price_str}, –ù–∞—Å—Ç—É–ø–Ω–∏–π TP: {next_tp_price_str or '–ù–µ–º–∞—î (–≤—Å—ñ TP –¥–æ—Å—è–≥–Ω—É—Ç—ñ –∞–±–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ)'}"
        )

        # ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º TP/SL
        if symbol not in self.positions:
            self.trade_logger.warning(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º TP/SL")
            return
        
        current_qty = self.positions[symbol].get('quantity', 0)
        if current_qty <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
            self.trade_logger.warning(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –º–∞—î –Ω—É–ª—å–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å ({current_qty:.8f}) –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º TP/SL")
            return

        api_response = await self.api_manager.set_trading_stop_for_position(
            symbol=symbol,
            stop_loss=new_sl_price_str,
            take_profit=next_tp_price_str, # Pass None if no TP to set
            position_idx=0, 
            tpsl_mode="Full" 
        )

        if api_response and api_response.get('retCode') == 0:
            self.trade_logger.info(f"TP/SL –¥–ª—è {symbol} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –±—ñ—Ä–∂—ñ (–ø—Ä–∏—á–∏–Ω–∞: {reason_for_update}). SL: {new_sl_price_str}, TP: {next_tp_price_str or 'N/A'}")
            position_data['current_stop_loss'] = float(new_sl_price_str)
            position_data['current_active_tp_price'] = float(next_tp_price_str) if next_tp_price_str else None
            position_data['last_tpsl_update_reason'] = reason_for_update
            position_data['last_tpsl_update_time'] = datetime.now(timezone.utc)
        else:
            error_code = api_response.get('retCode') if api_response else 'N/A'
            error_msg_api = api_response.get('retMsg', 'No API response').lower() if api_response else 'no api response'
            
            if str(error_code) == '34040' or "not modified" in error_msg_api: # ErrCode: 34040, ErrMsg: not modified
                self.trade_logger.warning(
                    f"TP/SL –¥–ª—è {symbol} –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –±—ñ—Ä–∂—ñ (not modified - {error_code}). "
                    f"–ô–º–æ–≤—ñ—Ä–Ω–æ, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ SL: {new_sl_price_str}, TP: {next_tp_price_str or 'N/A'} –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∞–±–æ –∑–∞–ø–∏—Ç —ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π. "
                    f"–ü—Ä–∏—á–∏–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {reason_for_update}. –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {api_response.get('retMsg')}"
                )
                # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –±—ñ—Ä–∂–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞, —â–æ —Ç–∞–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∂–µ —î (–∞–±–æ —ó—Ö –Ω–µ –±—É–ª–æ —ñ –Ω–µ —Ç—Ä–µ–±–∞)
                position_data['current_stop_loss'] = float(new_sl_price_str)
                position_data['current_active_tp_price'] = float(next_tp_price_str) if next_tp_price_str else None
                position_data['last_tpsl_update_reason'] = reason_for_update
                position_data['last_tpsl_update_time'] = datetime.now(timezone.utc)
                # –ù–µ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é, –∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∞–±–æ —Ç–æ–≥–æ, —â–æ –∑–º—ñ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
                return 

            self.trade_logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL –¥–ª—è {symbol} –Ω–∞ –±—ñ—Ä–∂—ñ (–ø—Ä–∏—á–∏–Ω–∞: {reason_for_update}). "
                f"SL: {new_sl_price_str}, TP: {next_tp_price_str or 'N/A'}. "
                f"API Code: {error_code}, Msg: {error_msg_api}"
            )
            
            is_zero_pos_error = (
                str(error_code) == '10001' and (
                    "zero position" in error_msg_api or 
                    "can not set tp/sl/ts for zero position" in error_msg_api or
                    "position not exist" in error_msg_api or
                    "no position found" in error_msg_api
                )
            ) or (
                str(error_code) in ['110017', '110025', '30036', '34036'] and (
                    "position not exist" in error_msg_api or
                    "no position found" in error_msg_api or
                    "position is not an order" in error_msg_api or
                    "order not exists or too late to cancel" in error_msg_api or 
                    "cannot set read only" in error_msg_api or
                    "position is closing" in error_msg_api
                )
            )

            if is_zero_pos_error:
                self.trade_logger.warning(
                    f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ TP/SL –¥–ª—è {symbol}, –∞–ª–µ –ø–æ–∑–∏—Ü—ñ—è, –π–º–æ–≤—ñ—Ä–Ω–æ, –≤–∂–µ –Ω—É–ª—å–æ–≤–∞/–≤—ñ–¥—Å—É—Ç–Ω—è/–∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–∞ –±—ñ—Ä–∂—ñ. "
                    f"–ü—Ä–∏—á–∏–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–∞: {reason_for_update}. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É..."
                )
                # –ü–æ–¥–∞–ª—å—à–∞ –ª–æ–≥—ñ–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º–∞—î –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ, —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –¥—ñ–π—Å–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞.
                # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ —ñ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É,
                # –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ, –π–º–æ–≤—ñ—Ä–Ω–æ, —Å—Ç–∞–Ω "–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞".
                # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º–∞—î —Ü–µ –≤–∏—è–≤–∏—Ç–∏.
                # –ú–æ–∂–Ω–∞ –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–µ–≥–∞–π–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏, —è–∫—â–æ —î —Ç–∞–∫–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å.
                if symbol in self.positions: # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è —â–µ —ñ—Å–Ω—É—î –ª–æ–∫–∞–ª—å–Ω–æ
                    self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} —â–µ —ñ—Å–Ω—É—î –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ API –≤–∫–∞–∑—É—î –Ω–∞ —ó—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å/–∑–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è TP/SL. –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é.")
                    asyncio.create_task(self.sync_single_position_with_history(symbol))

            else: # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏, –Ω–µ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—é –ø–æ–∑–∏—Ü—ñ—ó
                 await self.telegram.send_error_notification({
                    'type': 'SET_TPSL_ON_EXCHANGE_FAILED',
                    'message': f"Failed to update TP/SL for {symbol} (Reason: {reason_for_update}). SL: {new_sl_price_str}, TP: {next_tp_price_str or 'N/A'}. API Code: {error_code}, Msg: {error_msg_api}",
                    'symbol': symbol,
                    'action': f'UPDATE_TPSL_{reason_for_update}'
                })
    
    async def _apply_breakeven_sl(self, symbol: str, position_data: Dict[str, Any]):
        if symbol not in self.positions or position_data.get('quantity', 0) <= 0.0000001:
            self.trade_logger.debug(f"BE SL SKIP ({symbol}): –ü–æ–∑–∏—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
            return

        entry_price = position_data['entry_price']
        initial_atr = position_data.get('initial_atr_at_entry', 0.00001) 
        if initial_atr <= 0:
            initial_atr = 0.00001 
        
        atr_buffer_mult = STRATEGY_CONFIG.get('breakeven_buffer', 0.05) 
        atr_based_buffer = initial_atr * atr_buffer_mult
        
        current_sl_price = position_data['current_stop_loss']
        bot_signal_side = position_data['side']

        market_price = None
        tick_size = 0.00000001 
        instrument_details = await self.api_manager.get_instrument_info(symbol)
        price_decimals = 8 
        if instrument_details:
            price_filter = instrument_details.get('priceFilter', {})
            tick_size_str = price_filter.get('tickSize')
            if tick_size_str:
                try: # –î–æ–¥–∞–Ω–æ try-except –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
                    tick_size = float(tick_size_str)
                    if '.' in tick_size_str:
                        price_decimals = len(tick_size_str.split('.')[1].rstrip('0'))
                    else:
                        price_decimals = 0
                except ValueError:
                    self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ tickSize '{tick_size_str}' –Ω–∞ float –¥–ª—è {symbol}")
                    # –ó–∞–ª–∏—à–∞—î–º–æ price_decimals = 8 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        min_buffer_ticks = STRATEGY_CONFIG.get('breakeven_min_buffer_ticks', 3)
        tick_based_min_buffer = tick_size * min_buffer_ticks
        
        final_breakeven_buffer_value = max(atr_based_buffer, tick_based_min_buffer)

        self.trade_logger.debug(
            f"BE SL CALC ({symbol}): Entry: {entry_price:.{price_decimals}f}, ATR: {initial_atr:.{price_decimals}f}, "
            f"ATRBufferMult: {atr_buffer_mult}, ATRBasedBuffer: {atr_based_buffer:.{price_decimals}f}, "
            f"MinBufferTicks: {min_buffer_ticks}, TickBasedMinBuffer: {tick_based_min_buffer:.{price_decimals}f}, "
            f"FinalBEBuffer: {final_breakeven_buffer_value:.{price_decimals}f}"
        )

        proposed_new_sl_price = 0.0
        if bot_signal_side == 'BUY':
            proposed_new_sl_price = entry_price + final_breakeven_buffer_value
            if proposed_new_sl_price <= current_sl_price: 
                self.trade_logger.debug(
                    f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–Ω–µ –∫—Ä–∞—â–∏–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}."
                )
                return
            # --- –ó–ú–Ü–ù–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–æ–≤–∏–π SL –¥—ñ–π—Å–Ω–æ –≤–∏—â–µ –∑–∞ —Ü—ñ–Ω—É –≤—Ö–æ–¥—É ---
            if proposed_new_sl_price <= entry_price + tick_size: # –î–æ–¥–∞—î–º–æ tick_size —è–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—É—Ñ–µ—Ä
                self.trade_logger.warning(
                    f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É {entry_price:.{price_decimals}f}."
                )
                return
        elif bot_signal_side == 'SELL':
            proposed_new_sl_price = entry_price - final_breakeven_buffer_value
            if proposed_new_sl_price >= current_sl_price: 
                self.trade_logger.debug(
                    f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–Ω–µ –∫—Ä–∞—â–∏–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}."
                )
                return
            # --- –ó–ú–Ü–ù–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–æ–≤–∏–π SL –¥—ñ–π—Å–Ω–æ –Ω–∏–∂—á–µ –∑–∞ —Ü—ñ–Ω—É –≤—Ö–æ–¥—É ---
            if proposed_new_sl_price >= entry_price - tick_size: # –î–æ–¥–∞—î–º–æ tick_size —è–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—É—Ñ–µ—Ä
                self.trade_logger.warning(
                    f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É {entry_price:.{price_decimals}f}."
                )
                return
        
        if proposed_new_sl_price == 0.0: 
            self.logger.warning(f"BE SL SKIP ({symbol}): –ù–æ–≤–∏–π SL —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —è–∫ 0.")
            return

        ticker_data = await self.api_manager.get_tickers(category="linear", symbol=symbol)
        if ticker_data and ticker_data.get('retCode') == 0 and ticker_data['result']['list']:
            market_price_str = ticker_data['result']['list'][0].get('lastPrice')
            if market_price_str: market_price = float(market_price_str) # –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
            else: market_price = entry_price # Fallback
        else:
            self.trade_logger.warning(f"BE SL ({symbol}): –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ü—ñ–Ω—É –≤—Ö–æ–¥—É.")
            market_price = entry_price

        # Use symbol-specific buffer calculation for breakeven SL
        safety_buffer_market = self._calculate_symbol_specific_buffer(symbol, tick_size, market_price)

        if bot_signal_side == 'BUY':
            if proposed_new_sl_price >= market_price - safety_buffer_market:
                self.trade_logger.warning(
                    f"BE SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–≤–∏—â–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} "
                    f"(–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f})."
                )
                return
        elif bot_signal_side == 'SELL':
            if proposed_new_sl_price <= market_price + safety_buffer_market:
                self.trade_logger.warning(
                    f"BE SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–Ω–∏–∂—á–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} "
                    f"(–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f})."
                )
                return
        
        new_sl_price_str = f"{proposed_new_sl_price:.{price_decimals}f}"
        self.trade_logger.info(
            f"–†–ï–ê–õ–¨–ù–ò–ô (Breakeven SL): {symbol} ({bot_signal_side}). "
            f"Entry: {entry_price:.{price_decimals}f}, Market: {market_price:.{price_decimals}f}, "
            f"Current SL: {current_sl_price:.{price_decimals}f}, "
            f"Proposed New SL: {proposed_new_sl_price:.{price_decimals}f}. "
            f"Formatted New SL: {new_sl_price_str}."
        )
        
        current_tp_price_str = None
        if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            active_tp_level = next(
                (tp for tp in self.positions[symbol].get('take_profit_levels', []) 
                 if not tp.get('hit')), 
                None
            )
            if active_tp_level and 'price' in active_tp_level: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞ 'price'
                current_tp_price_str = f"{active_tp_level['price']:.{price_decimals}f}"
        else:
            self.logger.warning(f"BE SL ({symbol}): –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ self.positions –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º TP.")
            return # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î, –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ

        api_response = await self.api_manager.set_trading_stop_for_position(
            symbol=symbol, stop_loss=new_sl_price_str, take_profit=current_tp_price_str
        )

        if api_response and api_response.get('retCode') == 0:
            self.trade_logger.info(
                f"Breakeven SL –¥–ª—è {symbol} ({bot_signal_side}) —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_sl_price_str}"
            )
            if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
                self.positions[symbol]['current_stop_loss'] = float(new_sl_price_str)
        else:
            error_code = api_response.get('retCode') if api_response else 'N/A'
            error_msg_api = api_response.get('retMsg', 'No API response').lower() if api_response else 'no api response'
            self.trade_logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Breakeven SL –¥–ª—è {symbol} –Ω–∞ –±—ñ—Ä–∂—ñ. "
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {api_response}. –ó–∞–ø–∏—Ç SL: {new_sl_price_str}, TP: {current_tp_price_str}."
            )
            is_zero_pos_error = (
                str(error_code) == '10001' and # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∫–æ–¥—ñ–≤ –ø–æ–º–∏–ª–æ–∫
                ("zero position" in error_msg_api or 
                 "cannot set tp/sl/ts for zero position" in error_msg_api or
                 "position not exist" in error_msg_api or
                 "position is not an order" in error_msg_api)
            ) or str(error_code) == '30036' # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
            
            if is_zero_pos_error:
                self.trade_logger.warning(
                    f"–°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Breakeven SL –¥–ª—è {symbol}, –∞–ª–µ –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –Ω—É–ª—å–æ–≤–∞/–≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ."
                )
                await self.telegram.send_error_notification({
                    'type': f'SET_BE_SL_ON_ZERO_POS_{bot_signal_side}',
                    'message': (
                        f"Set Breakeven SL for {symbol} failed: position zero/closed. "
                        f"API: {api_response.get('retMsg', '') if api_response else 'N/A'} ({error_code})"
                    ),
                    'symbol': symbol, 
                    'action': 'SET_BREAKEVEN_SL'
                })
                if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
                    del self.positions[symbol]

    async def _apply_trailing_sl(self, symbol: str, position_data: Dict[str, Any], current_atr: float):
        if symbol not in self.positions or position_data.get('quantity', 0) <= 0.0000001:
            self.trade_logger.debug(f"TRAIL SL SKIP ({symbol}): –ü–æ–∑–∏—Ü—ñ—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.")
            return
        
        bot_signal_side = position_data['side']
        entry_price = position_data['entry_price']
        current_sl_price = position_data['current_stop_loss']
        
        if current_atr <= 0:
            self.trade_logger.debug(
                f"TRAIL SL ({symbol}): –ü–æ—Ç–æ—á–Ω–∏–π ATR ({current_atr}) –Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é initial_atr."
            )
            current_atr = position_data.get('initial_atr_at_entry', 0.00001)
            if current_atr <= 0:
                current_atr = 0.00001 

        trail_atr_mult = STRATEGY_CONFIG.get('trail_atr_mult', 0.7)
        trail_value = current_atr * trail_atr_mult
        
        market_price = None
        tick_size = 0.00000001 
        instrument_details = await self.api_manager.get_instrument_info(symbol)
        price_decimals = 8
        if instrument_details:
            price_filter = instrument_details.get('priceFilter', {})
            tick_size_str = price_filter.get('tickSize')
            if tick_size_str:
                try: # –î–æ–¥–∞–Ω–æ try-except
                    tick_size = float(tick_size_str)
                    if '.' in tick_size_str:
                        price_decimals = len(tick_size_str.split('.')[1].rstrip('0'))
                    else:
                        price_decimals = 0
                except ValueError:
                     self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ tickSize '{tick_size_str}' –Ω–∞ float –¥–ª—è {symbol} (—Ç—Ä–µ–π–ª—ñ–Ω–≥)")

        ticker_data = await self.api_manager.get_tickers(category="linear", symbol=symbol)
        if ticker_data and ticker_data.get('retCode') == 0 and ticker_data['result']['list']:
            market_price_str = ticker_data['result']['list'][0].get('lastPrice')
            if market_price_str: market_price = float(market_price_str) # –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
            else: market_price = entry_price # Fallback
        else:
            self.trade_logger.warning(f"TRAIL SL ({symbol}): –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ü—ñ–Ω—É –≤—Ö–æ–¥—É.")
            market_price = entry_price

        proposed_new_sl_price = current_sl_price 
        reference_price_for_trail = 0.0

        if bot_signal_side == 'BUY':
            reference_price_for_trail = position_data.get(
                'highest_high_since_trail_active', 
                position_data.get('highest_high_since_entry', entry_price) # fallback
            )
            calculated_sl = reference_price_for_trail - trail_value
            if calculated_sl > current_sl_price: 
                proposed_new_sl_price = calculated_sl
            else:
                self.trade_logger.debug(
                    f"TRAIL SL SKIP ({symbol} Long): –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π SL {calculated_sl:.{price_decimals}f} "
                    f"–Ω–µ –ø–æ–∫—Ä–∞—â—É—î –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}."
                )
                return
        elif bot_signal_side == 'SELL':
            reference_price_for_trail = position_data.get(
                'lowest_low_since_trail_active', 
                position_data.get('lowest_low_since_entry', entry_price) # fallback
            )
            calculated_sl = reference_price_for_trail + trail_value
            if calculated_sl < current_sl_price:
                proposed_new_sl_price = calculated_sl
            else:
                self.trade_logger.debug(
                    f"TRAIL SL SKIP ({symbol} Short): –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π SL {calculated_sl:.{price_decimals}f} "
                    f"–Ω–µ –ø–æ–∫—Ä–∞—â—É—î –ø–æ—Ç–æ—á–Ω–∏–π {current_sl_price:.{price_decimals}f}."
                )
                return
        
        self.trade_logger.debug(
            f"TRAIL SL CALC ({symbol} {bot_signal_side}): Market: {market_price:.{price_decimals}f}, "
            f"RefPrice: {reference_price_for_trail:.{price_decimals}f}, ATR: {current_atr:.{price_decimals}f}, "
            f"TrailVal: {trail_value:.{price_decimals}f}, "
            f"CalcSL: {(reference_price_for_trail - trail_value) if bot_signal_side == 'BUY' else (reference_price_for_trail + trail_value):.{price_decimals}f}, "
            f"CurrentSL: {current_sl_price:.{price_decimals}f}, ProposedSL: {proposed_new_sl_price:.{price_decimals}f}"
        )

        # Use symbol-specific buffer calculation for trailing SL
        safety_buffer_market = self._calculate_symbol_specific_buffer(symbol, tick_size, market_price)

        if bot_signal_side == 'BUY':
            if proposed_new_sl_price >= market_price - safety_buffer_market:
                self.trade_logger.warning(
                    f"TRAIL SL SKIP ({symbol} Long): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–≤–∏—â–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} "
                    f"(–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f})."
                )
                return
        elif bot_signal_side == 'SELL':
            if proposed_new_sl_price <= market_price + safety_buffer_market:
                self.trade_logger.warning(
                    f"TRAIL SL SKIP ({symbol} Short): –ù–æ–≤–∏–π SL {proposed_new_sl_price:.{price_decimals}f} "
                    f"–∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ/–Ω–∏–∂—á–µ —Ä–∏–Ω–∫—É {market_price:.{price_decimals}f} "
                    f"(–±—É—Ñ–µ—Ä {safety_buffer_market:.{price_decimals}f})."
                )
                return

        if abs(proposed_new_sl_price - current_sl_price) < tick_size / 2: # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ª–æ–≤–∏–Ω–æ—é —Ç—ñ–∫—É
            self.trade_logger.debug(
                f"TRAIL SL SKIP ({symbol}): –ó–º—ñ–Ω–∞ SL "
                f"({proposed_new_sl_price:.{price_decimals}f} vs {current_sl_price:.{price_decimals}f}) "
                f"–º–µ–Ω—à–∞ –∑–∞ –ø—ñ–≤—Ç—ñ–∫–∞ ({tick_size / 2:.{price_decimals+1}f})."
            )
            return
            
        new_sl_price_str = f"{proposed_new_sl_price:.{price_decimals}f}"
        self.trade_logger.info(
            f"–†–ï–ê–õ–¨–ù–ò–ô (Trailing SL): {symbol} ({bot_signal_side}). "
            f"Market: {market_price:.{price_decimals}f}, "
            f"RefPrice: {reference_price_for_trail:.{price_decimals}f}, "
            f"Current SL: {current_sl_price:.{price_decimals}f}, "
            f"Proposed New SL: {proposed_new_sl_price:.{price_decimals}f}. "
            f"Formatted New SL: {new_sl_price_str}."
        )
        
        current_tp_price_str = None
        if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            active_tp_level = next(
                (tp for tp in self.positions[symbol].get('take_profit_levels', []) 
                 if not tp.get('hit')), 
                None
            )
            if active_tp_level and 'price' in active_tp_level: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–∞ 'price'
                current_tp_price_str = f"{active_tp_level['price']:.{price_decimals}f}"
        else:
            self.logger.warning(f"TRAIL SL ({symbol}): –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ self.positions –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º TP.")
            return # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î, –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ

        api_response = await self.api_manager.set_trading_stop_for_position(
            symbol=symbol, stop_loss=new_sl_price_str, take_profit=current_tp_price_str 
        )

        if api_response and api_response.get('retCode') == 0:
            self.trade_logger.info(
                f"Trailing SL –¥–ª—è {symbol} ({bot_signal_side}) —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_sl_price_str}"
            )
            if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
                self.positions[symbol]['current_stop_loss'] = float(new_sl_price_str)
        else:
            error_code = api_response.get('retCode') if api_response else 'N/A'
            error_msg_api = api_response.get('retMsg', 'No API response').lower() if api_response else 'no api response'
            self.trade_logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Trailing SL –¥–ª—è {symbol} –Ω–∞ –±—ñ—Ä–∂—ñ. "
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {api_response}. –ó–∞–ø–∏—Ç SL: {new_sl_price_str}, TP: {current_tp_price_str}."
            )
            is_zero_pos_error = (
                str(error_code) == '10001' and # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
                ("zero position" in error_msg_api or 
                 "cannot set tp/sl/ts for zero position" in error_msg_api or
                 "position not exist" in error_msg_api or
                 "position is not an order" in error_msg_api)
            ) or str(error_code) == '30036' # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤

            if is_zero_pos_error:
                self.trade_logger.warning(
                    f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ Trailing SL –¥–ª—è {symbol}, –∞–ª–µ –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –Ω—É–ª—å–æ–≤–∞/–≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ."
                )
                await self.telegram.send_error_notification({
                    'type': f'SET_TRAIL_SL_ON_ZERO_POS_{bot_signal_side}',
                    'message': (
                        f"Update Trailing SL for {symbol} failed: position zero/closed. "
                        f"API: {api_response.get('retMsg', '') if api_response else 'N/A'} ({error_code})"
                    ),
                    'symbol': symbol, 
                    'action': 'SET_TRAILING_SL'
                })
                if symbol in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
                    del self.positions[symbol]



    def _format_position_type(self, side: str, action: str) -> str:
        """
        ‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∏–ø—É –ø–æ–∑–∏—Ü—ñ—ó –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –µ–º–æ–¥–∑—ñ
        """
        if side == 'BUY':
            if 'CLOSE' in action:
                return "üìà LONG CLOSE"
            elif 'PARTIAL' in action:
                return "üìà LONG PARTIAL"
            else:
                return "üìà LONG"
        else:  # SELL
            if 'CLOSE' in action:
                return "üìâ SHORT CLOSE"
            elif 'PARTIAL' in action:
                return "üìâ SHORT PARTIAL"  
            else:
                return "üìâ SHORT"

    async def _close_position(self, symbol: str, close_price: float, reason: str, quantity_to_close: Optional[float] = None):
        if symbol not in self.positions:
            self.logger.warning(f"–°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è {symbol} (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥—ñ –≤ _close_position)")
            return

        position_data = self.positions[symbol]
        bot_signal_side = position_data['side'] 
        entry_price = position_data['entry_price']
        initial_pos_quantity = position_data['initial_quantity'] # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É PnL —á–∞—Å—Ç–∏–Ω–∏
        remaining_quantity_before_close = position_data['quantity']
        
        if remaining_quantity_before_close <= 0.0000001:
            self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –≤–∂–µ –º–∞—î –Ω—É–ª—å–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å ({remaining_quantity_before_close:.8f}). –ü—Ä–æ–ø—É—Å–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è.")
            if symbol in self.positions:
                del self.positions[symbol]
            return

        qty_to_close_float = abs(quantity_to_close) if quantity_to_close is not None else abs(remaining_quantity_before_close)
        qty_to_close_float = min(qty_to_close_float, abs(remaining_quantity_before_close)) 

        if qty_to_close_float <= 0.0000001:
            self.logger.warning(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol} ({qty_to_close_float:.8f}) –Ω—É–ª—å–æ–≤–∞ –∞–±–æ –≤—ñ–¥'—î–º–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
            return

        close_order_side_api = "Sell" if bot_signal_side == "BUY" else "Buy" 
        self.trade_logger.info(
            f"–†–ï–ê–õ–¨–ù–ò–ô: –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è ~{qty_to_close_float:.8f} {symbol} "
            f"({bot_signal_side} –ø–æ–∑–∏—Ü—ñ—è) —á–µ—Ä–µ–∑ {close_order_side_api} –æ—Ä–¥–µ—Ä. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

        qty_to_close_str_for_api = ""
        instrument_info = await self.api_manager.get_instrument_info(symbol)
        final_qty_to_close_for_api_float = qty_to_close_float
        qty_decimals = 8 

        if instrument_info:
            lot_size_filter = instrument_info.get('lotSizeFilter', {})
            qty_step_str = lot_size_filter.get('qtyStep')
            if qty_step_str:
                try:
                    qty_step = float(qty_step_str)
                    if '.' in qty_step_str: 
                        qty_decimals = len(qty_step_str.split('.')[1].rstrip('0'))
                    else: 
                        qty_decimals = 0

                    if qty_step > 0:
                        final_qty_to_close_for_api_float = round(qty_to_close_float / qty_step) * qty_step
                        if final_qty_to_close_for_api_float == 0 and qty_to_close_float > 0:
                            if quantity_to_close is None: 
                                min_order_qty_str = lot_size_filter.get('minOrderQty')
                                if min_order_qty_str:
                                    min_order_qty = float(min_order_qty_str)
                                    if remaining_quantity_before_close >= min_order_qty:
                                        final_qty_to_close_for_api_float = min_order_qty
                                    elif remaining_quantity_before_close >= qty_step:
                                        final_qty_to_close_for_api_float = qty_step
                                elif remaining_quantity_before_close >= qty_step:
                                    final_qty_to_close_for_api_float = qty_step
                            elif qty_to_close_float >= qty_step: 
                                final_qty_to_close_for_api_float = qty_step
                        qty_to_close_str_for_api = f"{final_qty_to_close_for_api_float:.{qty_decimals}f}"
                except ValueError:
                    self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ qtyStep '{qty_step_str}' –Ω–∞ float –¥–ª—è {symbol}")
                    qty_to_close_str_for_api = f"{final_qty_to_close_for_api_float:.{qty_decimals}f}".rstrip('0').rstrip('.')
            else: 
                qty_to_close_str_for_api = f"{final_qty_to_close_for_api_float:.{qty_decimals}f}".rstrip('0').rstrip('.')
        else: 
            qty_to_close_str_for_api = f"{final_qty_to_close_for_api_float:.{qty_decimals}f}".rstrip('0').rstrip('.')

        if not qty_to_close_str_for_api or float(qty_to_close_str_for_api) <= 0.0000001:
            self.logger.error(
                f"–§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol} –Ω—É–ª—å–æ–≤–∞ ('{qty_to_close_str_for_api}'). "
                f"–û—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ —Ä–æ–∑–º—ñ—â–µ–Ω–æ. –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è: {qty_to_close_float:.8f}"
            )
            if "Stop Loss" in reason or "Hit" in reason: 
                if symbol in self.positions:
                    self.trade_logger.warning(f"–ù—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol} –ø–æ '{reason}'. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó.")
                    del self.positions[symbol]
            return

        api_response = await self.api_manager.place_reduce_order(
            symbol=symbol, side=close_order_side_api, qty=qty_to_close_str_for_api, order_type="Market"
        )
        
        actually_closed_qty_for_pnl = 0.0
        try:
            actually_closed_qty_for_pnl = float(qty_to_close_str_for_api)
        except ValueError: 
            actually_closed_qty_for_pnl = qty_to_close_float
            self.logger.error(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ qty_to_close_str_for_api '{qty_to_close_str_for_api}' –Ω–∞ float "
                f"–¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É PnL {symbol}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ qty_to_close_float: {qty_to_close_float}"
            )

        if api_response and api_response.get('retCode') == 0:
            closed_order_id = api_response.get('result', {}).get('orderId')
            self.trade_logger.info(
                f"–†–ï–ê–õ–¨–ù–ò–ô: –ü–æ–∑–∏—Ü—ñ—è {symbol} ({bot_signal_side}) —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ {actually_closed_qty_for_pnl:.8f} –æ–¥. "
                f"–Ω–∞ –±—ñ—Ä–∂—ñ. Order ID: {closed_order_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            
            current_remaining_qty_local = 0.0
            if symbol in self.positions:
                self.positions[symbol]['quantity'] -= actually_closed_qty_for_pnl
                current_remaining_qty_local = self.positions[symbol]['quantity']
            else: 
                self.logger.warning(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ self.positions –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è _close_position –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.")

            pnl_for_closed_part = self.pnl_calculator.calculate_simple_pnl(
                entry_price=entry_price,
                close_price=close_price, # –¶—ñ–Ω–∞, –∑–∞ —è–∫–æ—é —Å–ø—Ä–∞—Ü—é–≤–∞–≤ —Ç—Ä–∏–≥–µ—Ä (SL —Ü—ñ–Ω–∞, TP —Ü—ñ–Ω–∞, —Ä–∏–Ω–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –¥–ª—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó)
                quantity=actually_closed_qty_for_pnl,
                side=bot_signal_side
            )
            
            # PnL –≤—ñ–¥—Å–æ—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–∫—Ä–∏—Ç–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó
            cost_of_closed_part = entry_price * actually_closed_qty_for_pnl
            pnl_percentage_for_part = (pnl_for_closed_part / cost_of_closed_part) * 100 if cost_of_closed_part != 0 else 0

            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ë—ñ–ª—å—à —Ç–æ—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑ –∫—Ä–∞—â–æ—é –ª–æ–≥—ñ–∫–æ—é
            is_full_close = False
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ü–µ –ø–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
            if quantity_to_close is None:
                # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ç–æ —Ü–µ –ø–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                is_full_close = True
            elif abs(current_remaining_qty_local) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                # –Ø–∫—â–æ –∑–∞–ª–∏—à–æ–∫ –º—ñ–∑–µ—Ä–Ω–∏–π, –≤–≤–∞–∂–∞—î–º–æ –ø–æ–≤–Ω–∏–º –∑–∞–∫—Ä–∏—Ç—Ç—è–º
                is_full_close = True
            elif "–ü–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è" in reason or "Full closure" in reason or "Stop Loss" in reason:
                # –Ø–∫—â–æ –≤ –ø—Ä–∏—á–∏–Ω—ñ –≤–∫–∞–∑–∞–Ω–æ –ø–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –∞–±–æ SL (–∑–∞–≤–∂–¥–∏ –ø–æ–≤–Ω–µ)
                is_full_close = True
            elif abs(actually_closed_qty_for_pnl - abs(remaining_quantity_before_close)) <= TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001):
                # –Ø–∫—â–æ –∑–∞–∫—Ä–∏–ª–∏ –≤—Å—é –Ω–∞—è–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                is_full_close = True
            
            self.trade_logger.debug(
                f"üìä –ê–Ω–∞–ª—ñ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: quantity_to_close={quantity_to_close}, "
                f"remaining_after={current_remaining_qty_local:.8f}, "
                f"closed_qty={actually_closed_qty_for_pnl:.8f}, "
                f"original_qty={remaining_quantity_before_close:.8f}, "
                f"is_full_close={is_full_close}"
            )
            
            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ù–µ–≥–∞–π–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –ø–æ–≤–Ω–æ–º—É –∑–∞–∫—Ä–∏—Ç—Ç—ñ
            if is_full_close and symbol in self.positions:
                self.trade_logger.info(f"üîÑ –ù–µ–≥–∞–π–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó {symbol} –∑ –ø–∞–º'—è—Ç—ñ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                del self.positions[symbol]
            
            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–≤–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç—Ç—ñ–≤
            if is_full_close:
                trade_data_for_stats = {
                    'action': f'CLOSE_{bot_signal_side}',
                    'symbol': symbol,
                    'price': close_price,
                    'quantity': actually_closed_qty_for_pnl,
                    'entry_price': entry_price,
                    'side': bot_signal_side
                }
                
                stats_updated = await self._update_trade_statistics(
                    symbol=symbol,
                    pnl=pnl_for_closed_part, 
                    trade_data=trade_data_for_stats,
                    reason=f"direct_close_{reason.replace(' ', '_').lower()}"
                )
                
                if not stats_updated:
                    # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É, —è–∫—â–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
                    self.trade_stats['total_pnl'] += pnl_for_closed_part
                    self.trade_stats['total_trades'] += 1
                    if pnl_for_closed_part > 0:
                        self.trade_stats['winning_trades'] += 1
                    else:
                        self.trade_stats['losing_trades'] += 1
                    
                    await self.db_manager.save_trade_stats(self.trade_stats)
                    self.logger.warning(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {symbol}")
            else:
                # –î–ª—è —á–∞—Å—Ç–∫–æ–≤–∏—Ö –∑–∞–∫—Ä–∏—Ç—Ç—ñ–≤ —Ç—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π P&L
                self.trade_stats['total_pnl'] += pnl_for_closed_part
                await self.db_manager.save_trade_stats(self.trade_stats)
                
                self.logger.info(
                    f"üìä P&L –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol} ({actually_closed_qty_for_pnl:.4f} –æ–¥.): {pnl_for_closed_part:+.4f} USDT. "
                    f"–ó–∞–≥–∞–ª—å–Ω–∏–π P&L –±–æ—Ç–∞: {self.trade_stats['total_pnl']:.4f} USDT"
                )


            action_type_suffix = ""
            if "Stop Loss" in reason: action_type_suffix = "SL_HIT"
            elif "partial_1" in reason: action_type_suffix = "PARTIAL_TP1_HIT"
            elif "partial_2" in reason: action_type_suffix = "PARTIAL_TP2_HIT"
            elif "partial_3" in reason: action_type_suffix = "PARTIAL_TP3_HIT"
            elif "final" in reason: action_type_suffix = "FINAL_TP_HIT"
            elif "Volume Divergence" in reason: action_type_suffix = "VOL_DIV_EXIT"
            else: action_type_suffix = "CLOSE" # –ó–∞–≥–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è, —è–∫—â–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞

            action_type = f'{action_type_suffix}_{bot_signal_side}' if is_full_close else f'PARTIAL_{action_type_suffix}_{bot_signal_side}'
            if "Hit" not in reason and "Exit" not in reason: # –Ø–∫—â–æ —Ü–µ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∏–π –≤–∏—Ö—ñ–¥, –∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä—É—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                action_type = f'MANUAL_CLOSE_{bot_signal_side}' if is_full_close else f'MANUAL_PARTIAL_CLOSE_{bot_signal_side}'


            trade_notification_data = {
                'action': action_type, 
                'symbol': symbol, 
                'side': bot_signal_side, 
                'price': close_price,
                'entry_price': entry_price,
                'quantity': actually_closed_qty_for_pnl, 
                'reason': reason, 
                'pnl': pnl_for_closed_part, 
                'pnl_percentage': pnl_percentage_for_part,
                'remaining_quantity': max(0, current_remaining_qty_local),
                'exchange_order_id': closed_order_id
            }
            await self.telegram.send_trade_notification(trade_notification_data)
            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–º—É –º–µ—Ç–æ–¥—ñ
            # self.strategy.update_risk_management(pnl_for_closed_part) - –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É 

            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –û—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ
            if not is_full_close and symbol in self.positions: 
                self.trade_logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–∫—Ä–∏—Ç–∞. –ó–∞–ª–∏—à–æ–∫: {current_remaining_qty_local:.8f}")
                if abs(current_remaining_qty_local) <= 0.0000001:
                    self.trade_logger.info(f"–ó–∞–ª–∏—à–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó {symbol} ({current_remaining_qty_local:.8f}) –¥—É–∂–µ –º–∞–ª–∏–π. –í–∏–¥–∞–ª–µ–Ω–Ω—è.")
                    if symbol in self.positions: 
                        del self.positions[symbol]
        else:
            # ... (—ñ—Å–Ω—É—é—á–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ place_reduce_order) ...
            failed_request_params = api_response.get('retExtInfo', {}).get('req', api_response.get('request_params', {})) if api_response else {}
            error_code = api_response.get('retCode') if api_response else 'N/A'
            error_msg_api = api_response.get('retMsg', 'Unknown error or no API response') if api_response else 'No API response'
            error_msg_api_lower = error_msg_api.lower()

            log_message = (
                f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol} –Ω–∞ –±—ñ—Ä–∂—ñ. "
                f"API Response: {error_msg_api} (Code: {error_code}). "
                f"–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {reason}. –ó–∞–ø–∏—Ç: {failed_request_params}"
            )
            self.trade_logger.error(log_message)
            
            is_zero_pos_error = False
            if (str(error_code) in ['110017', '110025', '30036'] or 
                "position is zero" in error_msg_api_lower or
                "zero position" in error_msg_api_lower or
                "no position" in error_msg_api_lower or
                "position not exist" in error_msg_api_lower or
                (str(error_code) == '10001' and "position" in error_msg_api_lower and 
                ("zero" in error_msg_api_lower or "not exist" in error_msg_api_lower))):
                is_zero_pos_error = True

            if is_zero_pos_error:
                self.trade_logger.warning(
                    f"–°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é {symbol}, —è–∫–∞ –≤–∂–µ –Ω—É–ª—å–æ–≤–∞/–≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ "
                    f"(–ø—Ä–∏—á–∏–Ω–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {reason})"
                )
                pnl_for_already_closed_val = "N/A (already closed)"
                if entry_price and actually_closed_qty_for_pnl > 0:
                    pnl_for_already_closed_val = self.pnl_calculator.calculate_simple_pnl(
                        entry_price=entry_price, close_price=close_price,
                        quantity=actually_closed_qty_for_pnl, side=bot_signal_side
                    )

                await self.telegram.send_trade_notification({
                    'action': f'ALREADY_CLOSED_{bot_signal_side}', 
                    'symbol': symbol, 'side': bot_signal_side, 'price': close_price,
                    'entry_price': entry_price, 'quantity': qty_to_close_float,
                    'reason': f"{reason} (attempt on zero/closed pos)", 
                    'pnl': pnl_for_already_closed_val, 'remaining_quantity': 0, 
                    'details': f"API Err: {error_msg_api} ({error_code})"
                })
                if symbol in self.positions:
                    self.positions[symbol]['quantity'] = 0 
                    del self.positions[symbol] 
                return 
            
            await self.telegram.send_error_notification({
                'type': 'EXCHANGE_CLOSE_ORDER_FAILED', 'message': log_message, 
                'symbol': symbol, 'action': f'CLOSE_{bot_signal_side}', 
                'api_response': str(api_response)
            })

    async def pre_cycle_position_validation(self):
        """
        –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ–π –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É.
        –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞ 5-7 —Å–µ–∫—É–Ω–¥ –¥–æ –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—Å—ñ—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π.
        """
        try:
            pre_cycle_config = STRATEGY_CONFIG.get('pre_cycle_validation', {})
            if not pre_cycle_config.get('enable', True):
                self.logger.debug("Pre-cycle validation –≤–∏–º–∫–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
                return
                
            self.logger.info("üîÑ –†–æ–∑–ø–æ—á–∏–Ω–∞–Ω–Ω—è pre-cycle position validation...")
            validation_start_time = datetime.now(timezone.utc)
            
            if not self.positions:
                self.logger.info("‚úÖ Pre-cycle validation: –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó")
                return
                
            positions_count = len(self.positions)
            self.logger.info(f"üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è {positions_count} –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º —Ü–∏–∫–ª–æ–º")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ
            exchange_positions = await self.api_manager.get_positions()
            if exchange_positions is None:
                self.logger.warning("‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ –¥–ª—è pre-cycle validation")
                return
                
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –±—ñ—Ä–∂—ñ
            active_symbols_on_exchange = {}
            for pos in exchange_positions:
                pos_size = float(pos.get('size', 0))
                pos_symbol = pos.get('symbol', '')
                threshold = TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)
                
                if pos_size > threshold:
                    active_symbols_on_exchange[pos_symbol] = {
                        'side': pos.get('side', 'None'),
                        'size': pos_size,
                        'avg_price': float(pos.get('avgPrice', 0)),
                        'unrealized_pnl': float(pos.get('unrealisedPnl', 0))
                    }
                    
            # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–∂–Ω—É –ª–æ–∫–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            validated_positions = 0
            cleaned_positions = 0
            positions_to_remove = []
            
            for symbol in list(self.positions.keys()):
                if symbol in active_symbols_on_exchange:
                    # –ü–æ–∑–∏—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –Ω–∞ –±—ñ—Ä–∂—ñ
                    exchange_pos = active_symbols_on_exchange[symbol]
                    local_pos = self.positions[symbol]
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —è–∫—â–æ —î —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ
                    local_qty = local_pos.get('remaining_quantity', 0)
                    exchange_qty = exchange_pos['size']
                    
                    if abs(local_qty - exchange_qty) > TRADING_CONFIG.get('sync_tolerance_qty', 0.0000001):
                        self.logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è {symbol}: {local_qty:.8f} ‚Üí {exchange_qty:.8f}")
                        self.positions[symbol]['remaining_quantity'] = exchange_qty
                        
                    validated_positions += 1
                    self.logger.debug(f"‚úÖ {symbol}: –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ {exchange_pos['side']} {exchange_qty:.8f}")
                else:
                    # –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ - –ø–æ—Ç—Ä–µ–±—É—î –æ—á–∏—â–µ–Ω–Ω—è
                    if pre_cycle_config.get('cleanup_invalid_positions', True):
                        self.logger.warning(f"üßπ {symbol}: –ª–æ–∫–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ, –ø–ª–∞–Ω—É—î—Ç—å—Å—è –æ—á–∏—â–µ–Ω–Ω—è")
                        positions_to_remove.append(symbol)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è  {symbol}: –ª–æ–∫–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ, –∞–ª–µ –æ—á–∏—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ")
                        
            # –û—á–∏—â—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            for symbol in positions_to_remove:
                self.logger.info(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó: {symbol}")
                del self.positions[symbol]
                cleaned_positions += 1
                
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            validation_duration = (datetime.now(timezone.utc) - validation_start_time).total_seconds()
            
            self.logger.info(
                f"‚úÖ Pre-cycle validation –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {validation_duration:.2f}—Å: "
                f"–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ {validated_positions}, –æ—á–∏—â–µ–Ω–æ {cleaned_positions} –ø–æ–∑–∏—Ü—ñ–π"
            )
            
            if cleaned_positions > 0:
                await self.telegram.send_notification(
                    f"üßπ Pre-cycle –æ—á–∏—â–µ–Ω–Ω—è: –≤–∏–¥–∞–ª–µ–Ω–æ {cleaned_positions} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ {positions_count}",
                    message_type='pre_cycle_cleanup'
                )
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ pre-cycle position validation: {e}", exc_info=True)
            await self.telegram.send_error_notification({
                'type': 'PRE_CYCLE_VALIDATION_ERROR', 
                'message': str(e)
            })
    
    async def quick_check_active_positions(self):
        """
        –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        
        –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:
        - –ö—Ä–∞—â–∏–π error handling
        - –ú–µ—Ö–∞–Ω—ñ–∑–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
        - –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –ø–æ–∑–∏—Ü—ñ–π
        - –û–±—Ä–æ–±–∫–∞ demo mode —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        """
        try:
            if not self.positions:
                self.logger.debug("üîç –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                return
            
            positions_count = len(self.positions)
            self.logger.info(f"üîç –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ {positions_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ –∑ retry –ª–æ–≥—ñ–∫–æ—é
            exchange_positions = None
            retry_count = 0
            max_retries = 3
            
            while retry_count < max_retries:
                try:
                    exchange_positions = await self.api_manager.get_positions()
                    break
                except Exception as e_get_pos:
                    retry_count += 1
                    self.logger.warning(f"‚ùå –°–ø—Ä–æ–±–∞ {retry_count}/{max_retries} –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e_get_pos}")
                    if retry_count < max_retries:
                        await asyncio.sleep(1.0 * retry_count)  # Exponential backoff
                    else:
                        self.logger.error(f"üí• –í—Å—ñ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ –Ω–µ –≤–¥–∞–ª–∏—Å—è –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±")
                        return
            
            if exchange_positions is None:
                self.logger.error("üí• –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —à–≤–∏–¥–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
                return
                
            # –ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –±—ñ—Ä–∂—ñ
            active_symbols_on_exchange = {}
            total_exchange_positions = len(exchange_positions) if exchange_positions else 0
            self.logger.debug(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ {total_exchange_positions} –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂—ñ")
            
            for pos in exchange_positions:
                pos_size = float(pos.get('size', 0))
                pos_symbol = pos.get('symbol', '')
                pos_side = pos.get('side', 'None')
                pos_avg_price = float(pos.get('avgPrice', 0))
                pos_pnl = float(pos.get('unrealisedPnl', 0))
                
                threshold = TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)
                if pos_size > threshold:
                    active_symbols_on_exchange[pos_symbol] = {
                        'side': pos_side,
                        'size': pos_size,
                        'avg_price': pos_avg_price,
                        'unrealized_pnl': pos_pnl,
                        'raw_position': pos
                    }
                    self.logger.debug(f"‚úÖ –ë—ñ—Ä–∂–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è: {pos_symbol} {pos_side} {pos_size:.8f} @ {pos_avg_price:.6f} (PnL: {pos_pnl:.4f})")
            
            self.logger.debug(f"üè¶ –ê–∫—Ç–∏–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–∞ –±—ñ—Ä–∂—ñ: {list(active_symbols_on_exchange.keys())}")
            self.logger.debug(f"üè† –õ–æ–∫–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó: {list(self.positions.keys())}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –ª–æ–∫–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            positions_to_check = list(self.positions.keys())
            missing_positions = []
            reconciled_positions = []
            
            for symbol in positions_to_check:
                try:
                    local_pos = self.positions.get(symbol, {})
                    local_qty = local_pos.get('quantity', 0)
                    local_side = local_pos.get('side', 'Unknown')
                    
                    if symbol not in active_symbols_on_exchange:
                        # –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ - –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
                        missing_positions.append(symbol)
                        
                        # ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –±—É–ª–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ü–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                        closure_check_data = {
                            'exit_price': 0,  # –ù–µ–≤—ñ–¥–æ–º–∞ —Ü—ñ–Ω–∞ –≤–∏—Ö–æ–¥—É
                            'quantity': local_qty,
                            'closure_type': 'missing_on_exchange'
                        }
                        
                        if self._is_closure_already_processed(symbol, closure_check_data):
                            self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è {symbol} - –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
                            continue
                        
                        # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–º—ñ—Å—Ç—å –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                        closure_analyzed = await self.analyze_and_notify_position_closure(symbol, local_pos)
                        
                        if not closure_analyzed:
                            # –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏
                            self.logger.warning(
                                f"‚ö†Ô∏è –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê: {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ "
                                f"(–ª–æ–∫–∞–ª—å–Ω–∞ {local_side} –ø–æ–∑–∏—Ü—ñ—è: {local_qty:.8f})"
                            )
                            
                            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
                            last_sl = local_pos.get('stop_loss', 0)
                            last_tp = local_pos.get('take_profits', [])
                            entry_price = local_pos.get('entry_price', 0)
                            
                            self.logger.info(
                                f"üìä {symbol} –ø–æ–∑–∏—Ü—ñ—è –¥–µ—Ç–∞–ª—ñ: entry={entry_price:.6f}, "
                                f"SL={last_sl:.6f}, TP={len(last_tp)} —Ä—ñ–≤–Ω—ñ–≤"
                            )
                        
                        # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                        await self.sync_single_position_with_history(symbol)
                        
                    else:
                        # –ü–æ–∑–∏—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å
                        exchange_pos = active_symbols_on_exchange[symbol]
                        exchange_qty = exchange_pos['size']
                        exchange_side = exchange_pos['side']
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
                        qty_diff = abs(local_qty - exchange_qty)
                        qty_tolerance = TRADING_CONFIG.get('sync_tolerance_qty', 0.0000001)
                        
                        if qty_diff > qty_tolerance:
                            self.logger.warning(
                                f"‚ö†Ô∏è –†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—É {symbol}: –ª–æ–∫–∞–ª—å–Ω–æ={local_qty:.8f}, "
                                f"–±—ñ—Ä–∂–∞={exchange_qty:.8f}, —Ä—ñ–∑–Ω–∏—Ü—è={qty_diff:.8f}"
                            )
                            reconciled_positions.append(symbol)
                            # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
                            self.positions[symbol].update({
                                'quantity': exchange_qty,
                                'last_reconcile_time': datetime.now(timezone.utc).isoformat(),
                                'reconcile_reason': 'quick_check_qty_mismatch'
                            })
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó
                        if local_side.upper() != exchange_side.upper():
                            self.logger.warning(
                                f"‚ö†Ô∏è –†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω–∏ {symbol}: –ª–æ–∫–∞–ª—å–Ω–æ={local_side}, "
                                f"–±—ñ—Ä–∂–∞={exchange_side}"
                            )
                            reconciled_positions.append(symbol)
                            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É
                            self.positions[symbol]['side'] = exchange_side
                        
                        self.logger.debug(f"‚úÖ {symbol} —É–∑–≥–æ–¥–∂–µ–Ω–æ: {exchange_side} {exchange_qty:.8f}")
                        
                except Exception as e_symbol:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {symbol}: {e_symbol}")
                    continue
            
            # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
            if missing_positions:
                self.logger.warning(
                    f"üìä –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {len(missing_positions)} –ø–æ–∑–∏—Ü—ñ–π –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ: {missing_positions}"
                )
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–Ω–∏–∫–ª—ñ –ø–æ–∑–∏—Ü—ñ—ó
                if hasattr(self, 'telegram_notifier') and self.telegram_notifier:
                    await self.telegram_notifier.send_notification(
                        f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—ó –∑–Ω–∏–∫–ª–∏ –∑ –±—ñ—Ä–∂—ñ: {', '.join(missing_positions)}\n"
                        f"–í–∏–∫–æ–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...",
                        message_type='position_tracking'
                    )
            
            if reconciled_positions:
                self.logger.info(
                    f"üîß –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {len(reconciled_positions)} –ø–æ–∑–∏—Ü—ñ–π —É–∑–≥–æ–¥–∂–µ–Ω–æ: {reconciled_positions}"
                )
            
            if not missing_positions and not reconciled_positions:
                self.logger.debug(
                    f"‚úÖ –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –≤—Å—ñ {len(positions_to_check)} –ª–æ–∫–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —É–∑–≥–æ–¥–∂–µ–Ω—ñ –∑ –±—ñ—Ä–∂–µ—é"
                )
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}", exc_info=True)
            # –°–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —è–∫ fallback
            if hasattr(self, 'positions') and self.positions:
                self.logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é —è–∫ fallback –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
                try:
                    await self.sync_positions_with_execution_history()
                except Exception as e_fallback:
                    self.logger.error(f"üí• Fallback —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞–∫–æ–∂ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e_fallback}")

    async def sync_positions_with_execution_history(self):
        """
        –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–≥–æ–¥ –Ω–∞ –±—ñ—Ä–∂—ñ.
        –í–∫–ª—é—á–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ.
        """
        if not TRADING_CONFIG.get('position_sync_enabled', True):
            self.logger.debug("üîï –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π –≤–∏–º–∫–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
            return
        
        try:
            debug_mode = TRADING_CONFIG.get('sync_debug_mode', False)
            
            if debug_mode:
                self.logger.info("üîÑ DEBUG: –ü–æ—á–∞—Ç–æ–∫ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (sync_positions_with_execution_history)")
            
            sync_results = {}
            symbols_to_sync = list(self.positions.keys()) # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
            
            if not symbols_to_sync:
                if debug_mode:
                    self.logger.info("üì≠ DEBUG: –ù–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó")
                return
            
            self.logger.info(f"üîÑ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è {len(symbols_to_sync)} –ø–æ–∑–∏—Ü—ñ–π: {symbols_to_sync}")
            
            # –î–æ–¥–∞–Ω–∞ —à–≤–∏–¥–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –±—ñ—Ä–∂—ñ
            positions_to_cleanup = []
            active_exchange_positions = {}
            
            try:
                exchange_positions_raw = await self.api_manager.get_positions()
                active_exchange_positions = {
                    pos.get('symbol'): {
                        'side': pos.get('side'),
                        'size': float(pos.get('size', 0)),
                        'avg_price': float(pos.get('avgPrice', 0)),
                        'unrealized_pnl': float(pos.get('unrealisedPnl', 0))
                    }
                    for pos in exchange_positions_raw 
                    if float(pos.get('size', 0)) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)
                }
                if debug_mode:
                    self.logger.info(f"üè¶ DEBUG (sync_positions): –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±—ñ—Ä–∂—ñ: {list(active_exchange_positions.keys())}")
                
                # –í–∏—è–≤–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó, —è–∫—ñ —î –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ
                for symbol in symbols_to_sync:
                    if symbol not in active_exchange_positions:
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
                        exists_on_exchange, exchange_data, status = await self.api_manager.validate_position_exists_on_exchange(symbol)
                        if not exists_on_exchange and status == "position_not_found_on_exchange":
                            positions_to_cleanup.append(symbol)
                            self.logger.warning(f"üßπ –ü–æ–∑–∏—Ü—ñ—è {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ, –ø–ª–∞–Ω—É—î—Ç—å—Å—è –æ—á–∏—â–µ–Ω–Ω—è")
                
            except Exception as e_get_pos:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂—ñ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e_get_pos}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ
            if positions_to_cleanup:
                await self._cleanup_missing_positions(positions_to_cleanup)

            for symbol in symbols_to_sync:
                if symbol not in self.positions: # –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π —ñ–Ω—à–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º –∞–±–æ –æ—á–∏—â–µ–Ω–Ω—è–º
                    sync_results[symbol] = {'is_synced': True, 'status': 'Symbol removed locally during sync iteration', 'action_taken': 'skipped_removed_locally', 'timestamp': datetime.now(timezone.utc).isoformat()}
                    continue
                
                local_pos_before_sync = self.positions[symbol].copy() # –ö–æ–ø—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                
                if debug_mode:
                    self.logger.info(f"üîç DEBUG (sync_positions): –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è {symbol}...")

                # –í–∏–∫–ª–∏–∫–∞—î–º–æ sync_single_position_with_history, —è–∫–∏–π –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É reconcile
                await self.sync_single_position_with_history(symbol)

                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫—É sync_single_position_with_history
                if symbol not in self.positions:
                    # –ü–æ–∑–∏—Ü—ñ—è –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ sync_single_position_with_history
                    sync_results[symbol] = {
                        'is_synced': True, # –í–≤–∞–∂–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω –æ–±—Ä–æ–±–ª–µ–Ω–æ (–∑–∞–∫—Ä–∏—Ç–æ)
                        'status': f"Position for {symbol} was closed and removed by detailed sync.",
                        'action_taken': 'position_removed_by_detailed_sync_periodic',
                        'exchange_status': active_exchange_positions.get(symbol, "not_found_on_exchange_after_sync"),
                        'timestamp': datetime.now(timezone.utc).isoformat()
                    }
                    self.logger.info(f"‚úÖ {symbol} –æ–±—Ä–æ–±–ª–µ–Ω–æ (–∑–∞–∫—Ä–∏—Ç–æ) –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó.")
                else:
                    # –ü–æ–∑–∏—Ü—ñ—è –≤—Å–µ —â–µ —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∏ –∑–º—ñ–Ω–∏
                    current_local_pos = self.positions[symbol]
                    action_desc = "no_significant_changes_by_detailed_sync_periodic"
                    status_desc = f"Position {symbol} remains active after detailed sync."
                    
                    if current_local_pos.get('sync_source', '').startswith('reconcile_update'):
                        action_desc = "position_updated_by_detailed_sync_periodic"
                        status_desc = f"Position {symbol} data updated by detailed sync. Report: {current_local_pos.get('sync_report', {}).get('status', 'N/A')}"
                    elif current_local_pos.get('sync_source', '').startswith('reconcile_confirmed'):
                         action_desc = "position_confirmed_by_detailed_sync_periodic"
                         status_desc = f"Position {symbol} confirmed as synchronized by detailed sync."
                    
                    sync_results[symbol] = {
                        'is_synced': True, # –Ø–∫—â–æ sync_single_position_with_history –Ω–µ –≤–∏–¥–∞–ª–∏–≤, –∑–Ω–∞—á–∏—Ç—å –≤–æ–Ω–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–∞, –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞
                        'status': status_desc,
                        'action_taken': action_desc,
                        'exchange_status': active_exchange_positions.get(symbol, "not_found_on_exchange_after_sync"), # –°—Ç–∞–Ω –Ω–∞ –±—ñ—Ä–∂—ñ –¥–æ sync_single
                        'final_local_qty': current_local_pos.get('quantity'),
                        'timestamp': datetime.now(timezone.utc).isoformat()
                    }
                    self.logger.info(f"‚úÖ {symbol} –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é –ø—ñ—Å–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –î—ñ—è: {action_desc}")

                await asyncio.sleep(0.1) # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏
            
            total_processed = len(sync_results)
            actions_summary = {k: v['action_taken'] for k, v in sync_results.items()}
            self.logger.info(f"‚úÖ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–æ–±–ª–µ–Ω–æ {total_processed} —Å–∏–º–≤–æ–ª—ñ–≤.")
            if actions_summary:
                self.logger.info(f"üîß –î—ñ—ó –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {actions_summary}")
            
            self.last_sync_results = { # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'total_positions_at_start': len(symbols_to_sync),
                'processed_symbols_count': total_processed,
                'results_summary': actions_summary,
                'detailed_results': sync_results # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            }
            
        except Exception as e:
            error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {str(e)}"
            self.logger.error(error_msg, exc_info=True)
            await self.telegram.send_error_notification({
                'type': 'PERIODIC_SYNC_CRITICAL_ERROR',
                'message': error_msg
            })
    
    def _calculate_symbol_specific_buffer(self, symbol: str, tick_size: float, market_price: float) -> float:
        """Calculate symbol-specific buffer for SL distance from market price"""
        try:
            # Base multiplier from config
            base_multiplier = TRADING_CONFIG.get('min_sl_market_distance_tick_multiplier', 5)
            
            # Symbol-specific adjustments based on price ranges and volatility
            if market_price > 1000:  # High-value symbols like BTC
                multiplier = max(2, base_multiplier * 0.5)  # Reduce buffer for high-value symbols
            elif market_price > 100:  # Medium-value symbols like ETH
                multiplier = max(3, base_multiplier * 0.7)  
            elif market_price > 1:   # Standard symbols
                multiplier = base_multiplier
            else:  # Low-value symbols like CHZUSDT, DOGEUSDT
                multiplier = max(base_multiplier, 8)  # Increase buffer for very low-value symbols
            
            # Additional adjustment for very small tick sizes (sub-penny)
            if tick_size < 0.0001:  # Very small tick sizes
                multiplier = max(multiplier, 10)
            elif tick_size < 0.001:  # Small tick sizes
                multiplier = max(multiplier, 8)
            
            # Calculate the buffer
            buffer = tick_size * multiplier
            
            # Ensure minimum buffer relative to market price (0.01% minimum)
            min_buffer_percent = market_price * 0.0001  # 0.01%
            buffer = max(buffer, min_buffer_percent)
            
            self.logger.debug(f"Buffer calculation for {symbol}: tick={tick_size}, price={market_price:.6f}, multiplier={multiplier}, buffer={buffer:.6f}")
            
            return buffer
            
        except Exception as e:
            self.logger.error(f"Error calculating buffer for {symbol}: {e}")
            # Fallback to original calculation
            return tick_size * TRADING_CONFIG.get('min_sl_market_distance_tick_multiplier', 5)

    async def _get_current_market_price(self, symbol: str) -> float:
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker_data = await self.api_manager.get_tickers(category="linear", symbol=symbol)
            if ticker_data and ticker_data.get('retCode') == 0 and ticker_data['result']['list']:
                market_price_str = ticker_data['result']['list'][0].get('lastPrice')
                if market_price_str:
                    return float(market_price_str)
            return 0.0
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return 0.0

    async def analyze_and_trade(self, symbol: str, execute_trade: bool = True) -> Dict[str, Any]:
        try:
            if symbol in self.positions and self.positions[symbol].get('quantity', 0) > 0:
                self.logger.debug(f"–ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –≤—Ö—ñ–¥.")
                return {'symbol': symbol, 'action': 'POSITION_ALREADY_OPEN', 'position_data': self.positions[symbol]}

            df = await self.db_manager.get_candles_for_analysis(
                symbol=symbol,
                timeframe=TRADING_CONFIG['timeframe'],
                limit=max(
                    200, 
                    INDICATORS_CONFIG.get('slow_ma', 21) + 
                    STRATEGY_CONFIG.get('regime_period', 20) + 
                    STRATEGY_CONFIG.get('momentum_period', 10) + 50
                ) 
            )
            
            if df.empty or len(df) < 50: # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
                self.logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É {symbol} ({len(df)} —Å–≤—ñ—á–æ–∫)")
                return {'symbol': symbol, 'action': 'NO_DATA'}
            
            latest_candle_validation_dict = df.iloc[-1].to_dict() # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫
            if not await self.validate_candle_data(symbol, latest_candle_validation_dict):
                self.logger.warning(f"–ê–Ω–æ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–≤—ñ—á–∫–∏ –¥–ª—è {symbol}")
                return {'symbol': symbol, 'action': 'INVALID_DATA'}
            
            signal_data = self.strategy.analyze_signals(symbol, df)
            
            log_reason = signal_data.get('reason', '')
            if "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" in log_reason and len(log_reason) > 100:
                log_reason = (
                    log_reason.split('–§—ñ–Ω–∞–ª—å–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:')[0] + "..." 
                    if '–§—ñ–Ω–∞–ª—å–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:' in log_reason 
                    else log_reason[:100] + "..."
                )

            confidence_value = signal_data.get(
                'confidence', 
                signal_data.get('long_confirmations_count', 0) if signal_data.get('signal') == 'BUY' 
                else signal_data.get('short_confirmations_count', 0)
            )

            self.logger.info(
                f"–ê–Ω–∞–ª—ñ–∑ {symbol}: {signal_data['signal']} "
                f"(–ü—ñ–¥—Ç–≤: {confidence_value}, "
                f"ADX: {signal_data.get('adx_value', 0.0):.1f} vs {signal_data.get('adx_threshold', 0.0):.1f}) "
                f"–ü—Ä–∏—á–∏–Ω–∞: {log_reason}"
            )
            
            time_filter_reason_config = TRADING_CONFIG.get('time_filter_settings', {}).get('time_filter_reason', '–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ —á–∞—Å–æ–º')
            if signal_data.get('reason') == time_filter_reason_config and signal_data['signal'] in ['BUY', 'SELL']:
                self.logger.info(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} ({signal_data['signal']}) –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ —á–∞—Å–æ–º. –ù–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é.")
                return {'symbol': symbol, 'action': 'HOLD_TIME_FILTERED', 'signal_data': signal_data}

            # üÜï –ü–û–ö–†–ê–©–ï–ù–ê –õ–û–ì–Ü–ö–ê: Telegram notifications —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
            telegram_config = STRATEGY_CONFIG.get('telegram_filtering', {})
            if not telegram_config.get('notify_only_selected_signals', True):
                # –°—Ç–∞—Ä–∞ —Å–∏—Å—Ç–µ–º–∞ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
                if signal_data['signal'] not in ['HOLD', 'ERROR_ANALYSIS'] and signal_data.get('entry_price', 0) > 0:
                    await self.telegram.send_signal_notification(signal_data)
            
            if signal_data['signal'] in ['BUY', 'SELL']:
                # –Ø–∫—â–æ execute_trade=False, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü—ñ—ó
                if not execute_trade:
                    return {'symbol': symbol, 'action': 'SIGNAL_BUFFERED', 'signal_data': signal_data}
                
                # –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –≤—ñ–¥—Ä–∞–∑—É, —è–∫—â–æ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤
                if (STRATEGY_CONFIG.get('enable_signal_prioritization', True) and 
                    len(self.positions) >= TRADING_CONFIG.get('max_orders_qty', 3)):
                    self.logger.info(
                        f"–°–∏–≥–Ω–∞–ª {symbol} ({signal_data['signal']}) –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó. "
                        f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(self.positions)}/{TRADING_CONFIG.get('max_orders_qty', 3)}"
                    )
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏
                    return {'symbol': symbol, 'action': 'PENDING_PRIORITIZATION', 'signal_data': signal_data}
                elif len(self.positions) >= TRADING_CONFIG.get('max_orders_qty', 3):
                    # –°—Ç–∞—Ä–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
                    self.logger.warning(
                        f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π ({len(self.positions)}). "
                        f"–ù–æ–≤–∏–π –æ—Ä–¥–µ—Ä –¥–ª—è {symbol} –Ω–µ –±—É–¥–µ —Ä–æ–∑–º—ñ—â–µ–Ω–æ."
                    )
                    return {'symbol': symbol, 'action': 'MAX_ORDERS_REACHED', 'signal_data': signal_data}
                
                # –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –≤—ñ–¥—Ä–∞–∑—É, —è–∫—â–æ —î –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
                trade_result = await self.execute_trade(symbol, signal_data)
                return trade_result
            
            return {'symbol': symbol, 'action': 'HOLD', 'signal_data': signal_data}
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è {symbol}: {e}", exc_info=True)
            await self.telegram.send_error_notification({'type': 'ANALYSIS_ERROR', 'message': str(e), 'symbol': symbol})
            return {'symbol': symbol, 'action': 'ERROR', 'error': str(e)}
            
    async def run_trading_cycle(self):
        try:
            self.logger.info("-" * 30 + " –ü–æ—á–∞—Ç–æ–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É " + "-" * 30)
            current_time_utc = datetime.now(timezone.utc)
            usdt_balance = await self.api_manager.get_usdt_balance() 
            self.logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")

            if self.positions:
                self.logger.info(f"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏: {list(self.positions.keys())}")
                active_symbols = list(self.positions.keys()) # –ö–æ–ø—ñ—é—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
                for symbol in active_symbols:
                    if symbol not in self.positions: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∑–∏—Ü—ñ—è –≤—Å–µ —â–µ —ñ—Å–Ω—É—î
                        continue
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å–≤—ñ—á–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—î—é
                    df_manage = await self.db_manager.get_candles_for_analysis(
                        symbol=symbol, 
                        timeframe=TRADING_CONFIG['timeframe'], 
                        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ–º—ñ—Ç –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
                        limit=max(100, INDICATORS_CONFIG.get('atr_length', 14) + INDICATORS_CONFIG.get('volume_divergence_period', 20) + 5) 
                    )
                    if not df_manage.empty:
                        latest_candle_for_manage = df_manage.iloc[-1].to_dict() # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫
                        
                        # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ATR —Ç–∞ –¥–∞–Ω–∏—Ö –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó
                        if 'atr' not in latest_candle_for_manage or pd.isna(latest_candle_for_manage['atr']):
                            # –Ø–∫—â–æ ATR –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π ATR –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                            latest_candle_for_manage['atr'] = self.positions[symbol].get('initial_atr_at_entry', 0.00001)
                        
                        if 'bullish_vol_divergence' not in latest_candle_for_manage:
                            latest_candle_for_manage['bullish_vol_divergence'] = df_manage.iloc[-1].get('bullish_vol_divergence', False) # False –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                        if 'bearish_vol_divergence' not in latest_candle_for_manage:
                            latest_candle_for_manage['bearish_vol_divergence'] = df_manage.iloc[-1].get('bearish_vol_divergence', False) # False –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                        
                        # –ü–µ—Ä–µ–¥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ—ó –∑ self.positions
                        await self.manage_active_position(symbol, self.positions[symbol], latest_candle_for_manage)
                    else:
                        self.logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—î—é {symbol}")
                    await asyncio.sleep(TRADING_CONFIG.get('delay_between_symbols_ms', 200) / 1000.0)

            # üÜï –ü–û–ö–†–ê–©–ï–ù–ê –°–ò–°–¢–ï–ú–ê –ë–£–§–ï–†–£ –°–ò–ì–ù–ê–õ–Ü–í
            self.logger.info("–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è –Ω–æ–≤–∏—Ö —É–≥–æ–¥...")
            signal_buffer_config = STRATEGY_CONFIG.get('signal_buffer', {})
            
            if signal_buffer_config.get('enable', True) and signal_buffer_config.get('collect_all_signals_first', True):
                # –ó–±–∏—Ä–∞—î–º–æ –í–°–Ü —Å–∏–≥–Ω–∞–ª–∏ —Å–ø–æ—á–∞—Ç–∫—É –≤ –±—É—Ñ–µ—Ä
                all_signals_buffer = []
                analysis_results = {}
                
                self.logger.info("üìä –ó–±–∏—Ä–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤ –±—É—Ñ–µ—Ä...")
                signals_collected = 0
                max_buffer_size = signal_buffer_config.get('max_buffer_size', 20)
                
                for symbol in TRADING_CONFIG['trade_pairs']:
                    if symbol not in self.positions: # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Å–∏–º–≤–æ–ª—É
                        result = await self.analyze_and_trade(symbol, execute_trade=False)  # –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –æ–¥—Ä–∞–∑—É
                        analysis_results[symbol] = result
                        
                        # –ó–±–∏—Ä–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≤ –±—É—Ñ–µ—Ä
                        if (result and result.get('signal_data', {}).get('signal') in ['BUY', 'SELL'] and
                            result.get('action') not in ['MAX_ORDERS_REACHED', 'ERROR']):
                            signal_data = result.get('signal_data', {})
                            signal_data['symbol'] = symbol
                            signal_data['analysis_result'] = result
                            all_signals_buffer.append(signal_data)
                            signals_collected += 1
                            
                            if signals_collected >= max_buffer_size:
                                self.logger.info(f"üõë –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –±—É—Ñ–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤: {max_buffer_size}")
                                break
                        
                        await asyncio.sleep(TRADING_CONFIG.get('delay_between_symbols_ms', 500) / 1000.0)
                    else:
                        self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –≤—Ö—ñ–¥ –¥–ª—è {symbol}, —î –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è.")
                
                self.logger.info(f"üìà –ó—ñ–±—Ä–∞–Ω–æ {len(all_signals_buffer)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤ –±—É—Ñ–µ—Ä")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑ –±—É—Ñ–µ—Ä–∞ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
                if all_signals_buffer:
                    processed_signals = await self._process_signals_with_buffer_prioritization(all_signals_buffer)
                    self.logger.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {len(processed_signals)} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –±—É—Ñ–µ—Ä–∞")
                else:
                    self.logger.info("üì≠ –ë—É—Ñ–µ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π - –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ")
            else:
                # –°—Ç–∞—Ä–∞ —Å–∏—Å—Ç–µ–º–∞ - –∑–±–∏—Ä–∞—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–¥–Ω–æ—á–∞—Å–Ω–æ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
                analysis_results = {}
                all_signals = []  # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
                
                for symbol in TRADING_CONFIG['trade_pairs']:
                    if symbol not in self.positions: # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Å–∏–º–≤–æ–ª—É
                        result = await self.analyze_and_trade(symbol)
                        analysis_results[symbol] = result
                        
                        # –ó–±–∏—Ä–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
                        if (result and result.get('signal_data', {}).get('signal') in ['BUY', 'SELL'] and
                            result.get('action') not in ['MAX_ORDERS_REACHED']):
                            signal_data = result.get('signal_data', {})
                            signal_data['symbol'] = symbol
                            signal_data['analysis_result'] = result
                            all_signals.append(signal_data)
                        
                        await asyncio.sleep(TRADING_CONFIG.get('delay_between_symbols_ms', 500) / 1000.0)
                    else:
                        self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –≤—Ö—ñ–¥ –¥–ª—è {symbol}, —î –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è.")
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—î—é (—Å—Ç–∞—Ä–∞ —Å–∏—Å—Ç–µ–º–∞)
                if all_signals:
                    processed_signals = await self._process_signals_with_prioritization(all_signals)
                    self.logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—î—é: {len(processed_signals)}")
                
            self.logger.info("-" * 30 + " –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É " + "-" * 30 + "\n")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {e}", exc_info=True)
            await self.telegram.send_error_notification({'type': 'TRADING_CYCLE_ERROR', 'message': str(e)})
    
    async def run(self):
        try:
            init_success = await self.initialize()
            if not init_success:
                self.logger.error("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞")
                return
            
            self.is_running = True
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –∑ proper task management
            update_task = self._create_task(
                self.preprocessor.start_continuous_update(),
                name="data_preprocessor",
                group="data_processing"
            )
            
            self.logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º task management!")
            await self.telegram.send_bot_status("RUNNING")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Å–æ–≤–∏—Ö –º—ñ—Ç–æ–∫
            last_balance_report_time = datetime.now(timezone.utc) - timedelta(
                minutes=TRADING_CONFIG.get('balance_report_interval_minutes', 15) + 1
            )
            last_quick_check_time = datetime.now(timezone.utc)
            last_sync_time = datetime.now(timezone.utc) - timedelta(
                minutes=TRADING_CONFIG.get('sync_check_interval_minutes', 2) + 1
            )

            # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
            usdt_balance_val = 0.0
            num_open_positions = 0

            # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º error handling
            while self.is_running:
                try:
                    current_time = datetime.now(timezone.utc)
                    
                    # üÜï –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ñ–ù–Ü 30 –°–ï–ö–£–ù–î
                    if ((current_time - last_quick_check_time).total_seconds() >= 
                        TRADING_CONFIG.get('position_check_interval_seconds', 30)):
                        
                        if self.positions:  # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
                            await self.quick_check_active_positions()
                        
                        last_quick_check_time = current_time

                    # üÜï –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó –Ü–°–¢–û–†–Ü–Ñ–Æ –ö–û–ñ–ù–Ü 2 –•–í–ò–õ–ò–ù–ò
                    if ((current_time - last_sync_time).total_seconds() >= 
                        TRADING_CONFIG.get('sync_check_interval_minutes', 2) * 60):
                        
                        if self.positions:  # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
                            self.logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(self.positions)}")
                            try:
                                await self.sync_positions_with_execution_history()
                                self.logger.info("‚úÖ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                            except Exception as e_sync:
                                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {e_sync}", exc_info=True)
                                await self.telegram.send_error_notification({
                                    'type': 'PERIODIC_SYNC_ERROR',
                                    'message': f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {e_sync}"
                                })
                        else:
                            self.logger.debug("üîÑ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                        
                        last_sync_time = current_time

                    # üÜï –ó–í–Ü–¢ –ë–ê–õ–ê–ù–°–£ –ö–û–ñ–ù–Ü 15 –•–í–ò–õ–ò–ù –ó –í–ê–õ–Ü–î–ê–¶–Ü–Ñ–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
                    if ((current_time - last_balance_report_time).total_seconds() >= 
                        TRADING_CONFIG.get('balance_report_interval_minutes', 15) * 60):
                        
                        # ‚úÖ –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –∑–≤—ñ—Ç–æ–º
                        await self._validate_and_correct_trade_statistics()
                        await self._log_detailed_statistics("balance_report")
                        
                        try:
                            usdt_balance_val = await self.api_manager.get_usdt_balance()
                        except Exception as e:
                            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É USDT: {e}")
                            usdt_balance_val = 0.0  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 0 —è–∫ fallback
                        
                        num_open_positions = len(self.positions)

                        if self.trade_stats['initial_balance'] is None and usdt_balance_val > 0:
                            self.trade_stats['initial_balance'] = usdt_balance_val
                            self.logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {usdt_balance_val:.2f} USDT")

                        # ‚úÖ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–ï–†–ï–î –í–Ü–î–ü–†–ê–í–ö–û–Æ
                        is_stats_valid = self.validate_trade_stats()
                        if not is_stats_valid:
                            self.logger.warning("üîÑ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é balance update")
                            calculated_total = self.trade_stats['winning_trades'] + self.trade_stats['losing_trades']
                            if calculated_total != self.trade_stats['total_trades']:
                                self.trade_stats['total_trades'] = calculated_total
                                self.logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞: total_trades = {calculated_total}")

                        await self.telegram.send_balance_update({
                            'usdt_balance': usdt_balance_val,
                            'initial_balance': self.trade_stats['initial_balance'],
                            'total_pnl': self.trade_stats['total_pnl'],
                            'open_positions_count': num_open_positions,
                            'total_trades': self.trade_stats['total_trades'],
                            'winning_trades': self.trade_stats['winning_trades'],
                            'losing_trades': self.trade_stats['losing_trades']
                        })
                        last_balance_report_time = current_time

                    # üÜï –û–°–ù–û–í–ù–ò–ô –¢–û–†–ì–û–í–ò–ô –¶–ò–ö–õ (–ù–ê –û–°–ù–û–í–Ü –ß–ê–°–£ –°–í–Ü–ß–û–ö)
                    next_trade_cycle_start_time = self.preprocessor.calculate_next_update_time()
                    now_utc = datetime.now(timezone.utc)
                    
                    actual_trade_cycle_start_time = next_trade_cycle_start_time + timedelta(
                        seconds=TRADING_CONFIG.get('trade_cycle_buffer_seconds', 15)
                    )
                    
                    # üÜï Pre-Cycle Position Validation Timing
                    pre_cycle_config = STRATEGY_CONFIG.get('pre_cycle_validation', {})
                    if pre_cycle_config.get('enable', True):
                        pre_cycle_validation_time = actual_trade_cycle_start_time - timedelta(
                            seconds=pre_cycle_config.get('seconds_before_cycle', 7)
                        )
                    else:
                        pre_cycle_validation_time = None
                    
                    sleep_seconds = (actual_trade_cycle_start_time - now_utc).total_seconds()
                    pre_cycle_sleep_seconds = (pre_cycle_validation_time - now_utc).total_seconds() if pre_cycle_validation_time else None
                    
                    if sleep_seconds > 0:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —Å–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å
                        if sleep_seconds > 30:
                            self.logger.info(
                                f"–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª –æ ~{actual_trade_cycle_start_time.strftime('%Y-%m-%d %H:%M:%S')} UTC. "
                                f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è: {sleep_seconds:.0f} —Å–µ–∫—É–Ω–¥"
                            )
                            
                            # Pre-cycle validation timing
                            pre_cycle_executed = False
                            
                            # –°–ø–∏–º–æ –ø–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ
                            while sleep_seconds > 10 and self.is_running:
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —á–∞—Å –¥–ª—è pre-cycle validation
                                current_time = datetime.now(timezone.utc)
                                if (pre_cycle_validation_time and not pre_cycle_executed and 
                                    current_time >= pre_cycle_validation_time):
                                    await self.pre_cycle_position_validation()
                                    pre_cycle_executed = True
                                
                                await asyncio.sleep(10)
                                sleep_seconds -= 10
                                current_time = datetime.now(timezone.utc)
                                
                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–≤–∏–¥–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                                if ((current_time - last_quick_check_time).total_seconds() >= 
                                    TRADING_CONFIG.get('position_check_interval_seconds', 30)):
                                    if self.positions:
                                        await self.quick_check_active_positions()
                                    last_quick_check_time = current_time
                            
                            # Final pre-cycle validation check
                            if (pre_cycle_validation_time and not pre_cycle_executed and 
                                self.is_running and datetime.now(timezone.utc) >= pre_cycle_validation_time):
                                await self.pre_cycle_position_validation()
                                pre_cycle_executed = True
                            
                            if self.is_running and sleep_seconds > 0:
                                await asyncio.sleep(sleep_seconds)
                        else:
                            # Short sleep - check if we need pre-cycle validation
                            if pre_cycle_sleep_seconds and pre_cycle_sleep_seconds > 0:
                                if pre_cycle_sleep_seconds < sleep_seconds:
                                    await asyncio.sleep(pre_cycle_sleep_seconds)
                                    await self.pre_cycle_position_validation()
                                    remaining_sleep = sleep_seconds - pre_cycle_sleep_seconds
                                    if remaining_sleep > 0:
                                        await asyncio.sleep(remaining_sleep)
                                else:
                                    await asyncio.sleep(sleep_seconds)
                            else:
                                await asyncio.sleep(sleep_seconds)
                    else:
                        self.logger.warning(
                            f"–ß–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É ({actual_trade_cycle_start_time.strftime('%Y-%m-%d %H:%M:%S')}) "
                            f"–≤–∂–µ –º–∏–Ω—É–≤ ({abs(sleep_seconds):.1f} —Å–µ–∫ —Ç–æ–º—É). –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {now_utc.strftime('%Y-%m-%d %H:%M:%S')} UTC. –ó–∞–ø—É—Å–∫..."
                        )
                        await asyncio.sleep(1)

                    if self.is_running:
                        await self.run_trading_cycle()
                    
                except KeyboardInterrupt:
                    self.logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è KeyboardInterrupt –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ")
                    self.is_running = False 
                    break 
                except asyncio.CancelledError:
                    self.logger.info("–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                    self.is_running = False
                    break
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}", exc_info=True)
                    await self.telegram.send_error_notification({'type': 'MAIN_LOOP_ERROR', 'message': str(e)})
                    await asyncio.sleep(TRADING_CONFIG.get('main_loop_error_sleep_seconds', 60))
            
            self.logger.info("–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            await self.telegram.send_bot_status("STOPPING")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏
            await self._shutdown_all_tasks()

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            await self.preprocessor.close()
            await self.api_manager.close()
            await self.db_manager.close()

            await self.telegram.send_bot_status("STOPPED")
            self.logger.info("–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ task management")
            
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}", exc_info=True)
            if hasattr(self, 'telegram') and self.telegram and self.telegram.bot:
                try:
                    await self.telegram.send_error_notification({
                        'type': 'CRITICAL_BOT_FAILURE', 
                        'message': f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {str(e)}"
                    })
                except Exception as e_telegram_critical:
                    self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ Telegram: {e_telegram_critical}")

    async def analyze_and_notify_position_closure(self, symbol: str, local_position: Dict) -> bool:
        """
        ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ê–Ω–∞–ª—ñ–∑—É—î –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó, –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞ –ø–∞—Ä–∞
            local_position: –õ–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            
        Returns:
            bool: True —è–∫—â–æ –∞–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            self.logger.info(f"üîç –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ API –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è
            closure_details = await self.api_manager.analyze_and_get_position_closure_details(symbol, local_position)
            
            if closure_details:
                # ‚úÖ –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –±—É–ª–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ü–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                if self._is_closure_already_processed(symbol, closure_details):
                    self.logger.debug(f"–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol} –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                    return True
                
                # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
                enhanced_closure_details = self._enhance_closure_analysis(closure_details, local_position)
                
                # ‚úÖ –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—Ä–≥–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                pnl_usdt = enhanced_closure_details.get('pnl_usdt', 0)
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                trade_data_for_stats = {
                    'action': f"EXTERNAL_CLOSE_{enhanced_closure_details.get('side', 'UNKNOWN')}",
                    'symbol': symbol,
                    'price': enhanced_closure_details.get('exit_price', 0),
                    'quantity': enhanced_closure_details.get('quantity', 0),
                    'entry_price': enhanced_closure_details.get('entry_price', 0),
                    'side': enhanced_closure_details.get('side', 'UNKNOWN')
                }
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥
                stats_updated = await self._update_trade_statistics(
                    symbol=symbol,
                    pnl=pnl_usdt,
                    trade_data=trade_data_for_stats,
                    reason=f"external_closure_{enhanced_closure_details.get('closure_type', 'unknown')}"
                )
                
                self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {'–æ–Ω–æ–≤–ª–µ–Ω–∞' if stats_updated else '–ù–ï –æ–Ω–æ–≤–ª–µ–Ω–∞ (–º–æ–∂–ª–∏–≤–æ –¥—É–±–ª—ñ–∫–∞—Ç)'} –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}")
                
                # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ù–µ–≥–∞–π–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø–∞–º'—è—Ç—ñ –ø—ñ—Å–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è
                if symbol in self.positions:
                    self.trade_logger.info(f"üîÑ –ù–µ–≥–∞–π–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {symbol} –∑ –ø–∞–º'—è—Ç—ñ –ø—ñ—Å–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è")
                    del self.positions[symbol]
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
                if hasattr(self, 'telegram') and self.telegram:
                    notification_sent = await self.telegram.send_position_closure_notification(enhanced_closure_details)
                    if notification_sent:
                        # ‚úÖ –î–û–î–ê–ù–û: –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
                        self._mark_closure_as_processed(symbol, enhanced_closure_details)
                        
                        # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è
                        closure_analysis_key = f"{symbol}_{enhanced_closure_details['closure_display_type']}_{enhanced_closure_details['exit_price']:.6f}"
                        if not self._is_closure_already_processed(closure_analysis_key, enhanced_closure_details):
                            self.trade_logger.info(
                                f"‚úÖ {symbol} Closure Analysis: {enhanced_closure_details['closure_display_type']} - "
                                f"P&L: {enhanced_closure_details['pnl_usdt']:.3f} USDT ({enhanced_closure_details['pnl_percentage']:.2f}%)"
                            )
                            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
                            self._mark_closure_as_processed(closure_analysis_key, enhanced_closure_details)
                    else:
                        self.trade_logger.warning(f"üì§ –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}")
                
                # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                self.logger.info(
                    f"üìä {symbol} –∑–∞–∫—Ä–∏—Ç–æ: {enhanced_closure_details['closure_display_type']} @ {enhanced_closure_details['exit_price']:.6f} "
                    f"(entry: {enhanced_closure_details['entry_price']:.6f}, P&L: {enhanced_closure_details['pnl_usdt']:.3f} USDT)"
                )
                
                return True
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è, –ø–æ–∫–∞–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                self.trade_logger.warning(f"‚ö†Ô∏è –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê: {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ (–∞–Ω–∞–ª—ñ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–π)")
                return False
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}", exc_info=True)
            # –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø–æ–∫–∞–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            self.trade_logger.warning(f"‚ö†Ô∏è –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê: {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ (–ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è)")
            return False

    def _enhance_closure_analysis(self, closure_details: Dict, local_position: Dict) -> Dict:
        """–ü–æ–∫—Ä–∞—â—É—î –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""
        try:
            enhanced_details = closure_details.copy()
            
            # ‚úÖ –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –∑–∞–∫—Ä–∏—Ç—Ç—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ
            close_reason = closure_details.get('close_reason', 'unknown')
            close_price = closure_details.get('exit_price', 0)
            entry_price = closure_details.get('entry_price', 0)
            side = closure_details.get('side', 'BUY')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            local_sl = local_position.get('current_stop_loss', local_position.get('stop_loss', 0))
            local_tps = local_position.get('take_profit_levels', [])
            entry_timestamp = local_position.get('entry_timestamp')
            
            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
            probable_trigger = "–ó–æ–≤–Ω—ñ—à–Ω—î –∑–∞–∫—Ä–∏—Ç—Ç—è"
            closure_emoji = "üí®"
            
            if close_reason == 'StopLoss' or self._is_sl_triggered(close_price, local_sl, side):
                probable_trigger = "Stop Loss —Å–ø—Ä–∞—Ü—é–≤–∞–≤"
                closure_emoji = "üõë"
                enhanced_details['closure_type'] = 'stop_loss'
            elif close_reason == 'TakeProfit' or self._is_tp_triggered(close_price, local_tps, side):
                tp_level = self._find_triggered_tp_level(close_price, local_tps, side)
                if any(level in tp_level.lower() for level in ['1', 'partial_1', 'partial 1']):
                    probable_trigger = "Take Profit 1 –¥–æ—Å—è–≥–Ω—É—Ç–æ"
                    closure_emoji = "üíé"
                elif any(level in tp_level.lower() for level in ['2', 'partial_2', 'partial 2']):
                    probable_trigger = "Take Profit 2 –¥–æ—Å—è–≥–Ω—É—Ç–æ"
                    closure_emoji = "üíé"
                elif any(level in tp_level.lower() for level in ['3', 'partial_3', 'partial 3']):
                    probable_trigger = "Take Profit 3 –¥–æ—Å—è–≥–Ω—É—Ç–æ"
                    closure_emoji = "üíé"
                else:
                    probable_trigger = "–§—ñ–Ω–∞–ª—å–Ω–∏–π Take Profit –¥–æ—Å—è–≥–Ω—É—Ç–æ"
                    closure_emoji = "üèÜ"
                enhanced_details['closure_type'] = 'take_profit'
            elif close_reason == 'UserCancel':
                probable_trigger = "–ú–∞–Ω—É–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è"
                closure_emoji = "üë§"
                enhanced_details['closure_type'] = 'manual_close'
            elif close_reason == 'Liquidation':
                probable_trigger = "–õ—ñ–∫–≤—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ—ó"
                closure_emoji = "üö®"
                enhanced_details['closure_type'] = 'liquidation'
            elif 'trailing' in close_reason.lower():
                probable_trigger = "Trailing Stop —Å–ø—Ä–∞—Ü—é–≤–∞–≤"
                closure_emoji = "‚ö°"
                enhanced_details['closure_type'] = 'trailing_stop'
            elif 'breakeven' in close_reason.lower():
                probable_trigger = "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≤ –±–µ–∑–∑–±–∏—Ç–æ–∫"
                closure_emoji = "‚öñÔ∏è"
                enhanced_details['closure_type'] = 'breakeven'
            elif 'price_mismatch' in close_reason.lower():
                probable_trigger = "–†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å —Ü—ñ–Ω –∑ –±—ñ—Ä–∂–µ—é"
                closure_emoji = "‚ö†Ô∏è"
                enhanced_details['closure_type'] = 'price_mismatch'
            else:
                enhanced_details['closure_type'] = 'external_close'
            
            enhanced_details['closure_display_type'] = probable_trigger
            enhanced_details['closure_emoji'] = closure_emoji
            
            # ‚úÖ –î–û–î–ê–ù–û: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ª–∏—à–∫—É –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–∏—Ö –∑–∞–∫—Ä–∏—Ç—Ç—ñ–≤
            closure_quantity = closure_details.get('quantity', 0)
            initial_quantity = local_position.get('initial_quantity', local_position.get('quantity', 0))
            current_quantity = local_position.get('quantity', 0)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
            remaining_quantity = max(0, current_quantity - closure_quantity)
            is_full_closure = (remaining_quantity <= 0.000001 or 
                             closure_details.get('is_full_closure', False) or
                             '–ü–æ–≤–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è' in probable_trigger)
            
            enhanced_details['remaining_quantity'] = remaining_quantity
            enhanced_details['is_full_closure'] = is_full_closure
            enhanced_details['initial_quantity'] = initial_quantity
            
            # ‚úÖ –î–û–î–ê–ù–û: –ß–∞—Å —Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            if entry_timestamp:
                try:
                    if isinstance(entry_timestamp, str):
                        entry_time = datetime.fromisoformat(entry_timestamp.replace('Z', '+00:00'))
                    else:
                        entry_time = entry_timestamp
                    
                    closure_time = datetime.now(timezone.utc)
                    enhanced_details['entry_time'] = entry_time
                    enhanced_details['closure_time'] = closure_time
                    
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—É –≤—Ö–æ–¥—É: {e}")
            
            # ‚úÖ –î–û–î–ê–ù–û: –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            if entry_price > 0:
                price_change_pct = ((close_price - entry_price) / entry_price * 100) if side == 'BUY' else ((entry_price - close_price) / entry_price * 100)
                enhanced_details['price_change_percentage'] = price_change_pct
            
            return enhanced_details
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
            return closure_details

    async def sync_single_position_with_history(self, symbol: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º."""
        if symbol not in self.positions:
            self.logger.debug(f"sync_single_position_with_history: –õ–æ–∫–∞–ª—å–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó.")
            
            # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–ï –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º lookback –¥–ª—è demo mode
            lookback_hours = TRADING_CONFIG.get('sync_lookback_hours_short', 24)
            if TRADING_CONFIG.get('mode', 'DEMO').upper() == 'DEMO':
                lookback_hours = 72  # –ë—ñ–ª—å—à–∏–π lookback –¥–ª—è demo mode —á–µ—Ä–µ–∑ –º–æ–∂–ª–∏–≤—ñ –∑–∞—Ç—Ä–∏–º–∫–∏
            
            history_check_pos, execution_details, analysis_msg = await self.api_manager.analyze_position_from_execution_history(
                symbol=symbol,
                lookback_hours=lookback_hours
            )
            
            if history_check_pos:
                self.logger.warning(
                    f"üîÑ –ü–û–ó–ò–¶–Ü–Ø –ó–ù–ê–ô–î–ï–ù–ê –ù–ê –ë–Ü–†–ñ–Ü: {symbol} –≤—ñ–¥—Å—É—Ç–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ, –ê–õ–ï –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –±—ñ—Ä–∂—ñ. "
                    f"–†–µ–∂–∏–º: {TRADING_CONFIG.get('mode', 'DEMO')}. –î–µ—Ç–∞–ª—ñ: {analysis_msg}"
                )
                
                # ‚úÖ –°–ü–†–û–ë–ê –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ü–û–ó–ò–¶–Ü–á
                try:
                    recovery_position = {
                        'symbol': symbol,
                        'side': history_check_pos.get('side', 'BUY'),
                        'quantity': float(history_check_pos.get('size', 0)),
                        'entry_price': float(history_check_pos.get('avgPrice', 0)),
                        'unrealized_pnl': float(history_check_pos.get('unrealisedPnl', 0)),
                        'created_at': datetime.now(timezone.utc).isoformat(),
                        'sync_source': 'recovered_from_exchange',
                        'recovery_timestamp': datetime.now(timezone.utc).isoformat(),
                        'recovery_reason': 'found_on_exchange_missing_locally',
                        'take_profits': [],  # Will be reconstructed later
                        'stop_loss': 0,      # Will be reconstructed later
                        'status': 'active'
                    }
                    
                    # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—É –ø–æ–∑–∏—Ü—ñ—é
                    self.positions[symbol] = recovery_position
                    
                    self.logger.info(
                        f"‚úÖ –ü–û–ó–ò–¶–Ü–Æ –í–Ü–î–ù–û–í–õ–ï–ù–û: {symbol} {recovery_position['side']} "
                        f"{recovery_position['quantity']:.8f} @ {recovery_position['entry_price']:.6f}"
                    )
                    
                    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
                    if hasattr(self, 'telegram_notifier') and self.telegram_notifier:
                        await self.telegram_notifier.send_notification(
                            f"üîÑ –ü–æ–∑–∏—Ü—ñ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ: {symbol}\n"
                            f"–°—Ç–æ—Ä–æ–Ω–∞: {recovery_position['side']}\n"
                            f"–†–æ–∑–º—ñ—Ä: {recovery_position['quantity']:.8f}\n"
                            f"–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {recovery_position['entry_price']:.6f}\n"
                            f"–†–µ–∂–∏–º: {TRADING_CONFIG.get('mode', 'DEMO')}",
                            message_type='position_recovery'
                        )
                    
                except Exception as e_recovery:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e_recovery}")
                    
            else:
                self.logger.debug(f"üì≠ {symbol}: –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ")
            return

        local_pos_copy = self.positions[symbol].copy()
        self.logger.info(f"–†–æ–∑–ø–æ—á–∞—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó: {symbol}")

        is_synced, updated_data_from_reconcile, sync_status_msg = await self.api_manager.reconcile_position_with_history(
            symbol, local_pos_copy
        )

        self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç reconcile_position_with_history –¥–ª—è {symbol}: is_synced={is_synced}, status_msg='{sync_status_msg}'")
        if updated_data_from_reconcile:
             self.logger.debug(f"–î–∞–Ω—ñ –≤—ñ–¥ reconcile: {updated_data_from_reconcile}")


        if not is_synced:
            self.logger.warning(f"–†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –≤–∏—è–≤–ª–µ–Ω–æ –¥–ª—è {symbol}: {sync_status_msg}")
            if updated_data_from_reconcile and 'closed_externally_details' in updated_data_from_reconcile:
                ext_details = updated_data_from_reconcile['closed_externally_details']
                
                # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–†–ò–ß–ò–ù –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô
                close_reason = ext_details.get('close_reason', 'unknown')
                close_price = ext_details.get('close_price', 0)
                entry_price = ext_details.get('entry_price', 0)
                local_sl = local_pos_copy.get('stop_loss', 0)
                local_tps = local_pos_copy.get('take_profits', [])
                side = ext_details.get('side', 'BUY')
                
                # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
                probable_trigger = "Unknown"
                if close_reason == 'StopLoss' or (local_sl > 0 and self._is_sl_triggered(close_price, local_sl, side)):
                    probable_trigger = f"Stop Loss (SL: {local_sl:.6f}, Close: {close_price:.6f})"
                elif close_reason == 'TakeProfit' or self._is_tp_triggered(close_price, local_tps, side):
                    tp_level = self._find_triggered_tp_level(close_price, local_tps, side)
                    probable_trigger = f"Take Profit Level {tp_level} (Close: {close_price:.6f})"
                elif close_reason == 'UserCancel':
                    probable_trigger = "Manual Close/Cancel"
                elif close_reason == 'Liquidation':
                    probable_trigger = "Liquidation"
                else:
                    probable_trigger = f"External Close ({close_reason})"
                
                self.logger.warning(
                    f"üìä –ü–û–ó–ò–¶–Ü–Ø –ó–ê–ö–†–ò–¢–ê: {symbol} –≤–∏–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –∑–∞–∫—Ä–∏—Ç–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ –ø—ñ–¥ —á–∞—Å reconcile.\n"
                    f"   –ü—Ä–∏—á–∏–Ω–∞: {probable_trigger}\n"
                    f"   –°—Ç–æ—Ä–æ–Ω–∞: {side}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {ext_details.get('quantity', 0):.8f}\n"
                    f"   –í—Ö—ñ–¥: {entry_price:.6f} ‚Üí –í–∏—Ö—ñ–¥: {close_price:.6f}\n"
                    f"   –†–µ–∂–∏–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {TRADING_CONFIG.get('mode', 'DEMO')}"
                )

                pnl = self.pnl_calculator.calculate_simple_pnl(
                    entry_price=ext_details['entry_price'],
                    close_price=ext_details['close_price'],
                    quantity=ext_details['quantity'], # –ü–æ–≤–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó, —è–∫–∞ –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞
                    side=ext_details['side']
                )
                
                pnl_percentage = 0
                if ext_details['entry_price'] > 0:
                    if ext_details['side'] == 'BUY':
                        pnl_percentage = ((ext_details['close_price'] - ext_details['entry_price']) / ext_details['entry_price']) * 100
                    else: # SELL
                        pnl_percentage = ((ext_details['entry_price'] - ext_details['close_price']) / ext_details['entry_price']) * 100
                
                trade_update_data = {
                    'symbol': symbol,
                    'action': f'EXTERNAL_SYNC_CLOSE_{ext_details["side"].upper()}',
                    'price': ext_details['close_price'],
                    'quantity': ext_details['quantity'], 
                    'quantity_float': ext_details['quantity'],
                    'side': ext_details['side'],
                    'reason': f"External/Sync Close: {ext_details.get('reason', 'N/A')}",
                    'detailed_close_reason': f"Source: {ext_details.get('source', 'reconcile')}. Details: {ext_details.get('reason', 'N/A')}",
                    'pnl': pnl,
                    'pnl_percentage': pnl_percentage,
                    'entry_price': ext_details['entry_price'],
                    'remaining_quantity': 0 
                }
                
                # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_updated = await self._update_trade_statistics(
                    symbol=symbol,
                    pnl=pnl,
                    trade_data=trade_update_data,
                    reason=f"reconcile_{ext_details.get('source', 'external')}"
                )
                
                if not stats_updated:
                    # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
                    self.trade_stats['total_trades'] += 1
                    if pnl > 0:
                        self.trade_stats['winning_trades'] += 1
                    elif pnl < 0:
                        self.trade_stats['losing_trades'] += 1
                    self.trade_stats['total_pnl'] += pnl
                    self.strategy.update_risk_management(pnl)
                    await self.db_manager.save_trade_stats(self.trade_stats)
                    self.logger.warning(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è reconcile {symbol}")
                
                await self.telegram.send_trade_notification(trade_update_data)
                
                if symbol in self.positions:
                    del self.positions[symbol]
                
                self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—î –∑–∞–∫—Ä–∏—Ç—Ç—è, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ reconcile.")

            elif updated_data_from_reconcile: # –ü–æ–∑–∏—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞, –∞–ª–µ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞
                self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑–≥—ñ–¥–Ω–æ reconcile: {sync_status_msg}")
                # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –º–∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –ø—Ä–∏–π—à–ª–∏ –≤—ñ–¥ reconcile
                # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 'take_profit_levels', 'initial_quantity' —Ç–æ—â–æ.
                original_tp_levels = self.positions[symbol].get('take_profit_levels')
                original_initial_quantity = self.positions[symbol].get('initial_quantity')
                # ‚úÖ CRITICAL FIX: Preserve backup entry price fields
                original_initial_entry_price = self.positions[symbol].get('initial_entry_price')
                original_signal_data = self.positions[symbol].get('original_signal_data')
                
                self.positions[symbol].update(updated_data_from_reconcile)
                
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –ø–æ–ª—è, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –±—É–ª–∏ —á–∞—Å—Ç–∏–Ω–æ—é updated_data_from_reconcile
                if 'take_profit_levels' not in updated_data_from_reconcile and original_tp_levels:
                    self.positions[symbol]['take_profit_levels'] = original_tp_levels
                if 'initial_quantity' not in updated_data_from_reconcile and original_initial_quantity:
                    self.positions[symbol]['initial_quantity'] = original_initial_quantity
                
                # ‚úÖ CRITICAL FIX: Preserve entry price backup fields to prevent data loss
                if 'initial_entry_price' not in updated_data_from_reconcile and original_initial_entry_price:
                    self.positions[symbol]['initial_entry_price'] = original_initial_entry_price
                if 'original_signal_data' not in updated_data_from_reconcile and original_signal_data:
                    self.positions[symbol]['original_signal_data'] = original_signal_data
                
                # ‚úÖ VALIDATION: Verify entry price integrity after update
                updated_entry_price = self.positions[symbol].get('entry_price', 0)
                if updated_entry_price <= 0:
                    # Try to recover from backup fields
                    if original_initial_entry_price and original_initial_entry_price > 0:
                        self.positions[symbol]['entry_price'] = original_initial_entry_price
                        self.logger.warning(f"üîß ENTRY PRICE RECOVERY: Restored entry price {original_initial_entry_price:.6f} for {symbol} after reconcile")
                    elif original_signal_data and 'entry_price' in original_signal_data:
                        signal_entry = float(original_signal_data['entry_price'])
                        if signal_entry > 0:
                            self.positions[symbol]['entry_price'] = signal_entry
                            self.logger.warning(f"üîß ENTRY PRICE RECOVERY: Restored entry price {signal_entry:.6f} from signal data for {symbol}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ 'current_active_tp_price' –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö TP —Ä—ñ–≤–Ω—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ —î
                active_tp_price_reconciled = None
                if self.positions[symbol].get('take_profit_levels'):
                    for tp_level in self.positions[symbol]['take_profit_levels']:
                        if not tp_level.get('hit', False) and tp_level.get('price'):
                            active_tp_price_reconciled = float(tp_level['price'])
                            break
                self.positions[symbol]['current_active_tp_price'] = active_tp_price_reconciled

                self.logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol} –ø—ñ—Å–ª—è reconcile: {self.positions[symbol]}")
                # –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ –≤ –ë–î, —è–∫—â–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ —Ç–∞–º –ø–æ–∑–∏—Ü—ñ—ó
            else:
                # updated_data_from_reconcile is None, –∞–ª–µ is_synced is False.
                # –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ reconcile –∞–±–æ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–π —Å—Ç–∞–Ω.
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ —Ä–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –¥–ª—è {symbol} –∞–±–æ –ø–æ–º–∏–ª–∫–∞ reconcile: {sync_status_msg}. –î–∞–Ω—ñ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        
        elif is_synced: # –ü–æ–∑–∏—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞
            if updated_data_from_reconcile: # –ú–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, unrealized PnL, latest_execution_time)
                self.positions[symbol].update(updated_data_from_reconcile)
                # –û–Ω–æ–≤–ª—é—î–º–æ 'current_active_tp_price' –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö TP —Ä—ñ–≤–Ω—ñ–≤
                active_tp_price_synced = None
                if self.positions[symbol].get('take_profit_levels'):
                    for tp_level in self.positions[symbol]['take_profit_levels']:
                        if not tp_level.get('hit', False) and tp_level.get('price'):
                            active_tp_price_synced = float(tp_level['price'])
                            break
                self.positions[symbol]['current_active_tp_price'] = active_tp_price_synced
                self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞ (–∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏): {sync_status_msg}")
                self.logger.debug(f"–î–µ—Ç–∞–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {self.positions[symbol]}")
            else:
                # is_synced is True, and updated_data_from_reconcile is None.
                # –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –ª–æ–∫–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó, –∞–±–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î (—ñ –ª–æ–∫–∞–ª—å–Ω–æ —Ç–µ–∂).
                self.logger.info(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —è–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞ (–±–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω—å –¥–∞–Ω–∏—Ö): {sync_status_msg}")

    async def _process_signals_with_prioritization(self, all_signals: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–æ–±–ª—è—î —Å–∏–≥–Ω–∞–ª–∏ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—î—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É.
        –í–∏–±–∏—Ä–∞—î –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ —Å–∏–≥–Ω–∞–ª–∏, —è–∫—â–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ max_orders_qty.
        """
        try:
            if not all_signals:
                return []
            
            max_orders = TRADING_CONFIG.get('max_orders_qty', 3)
            current_positions = len(self.positions)
            available_slots = max_orders - current_positions
            
            self.logger.info(f"–ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤: {len(all_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤, "
                           f"{current_positions}/{max_orders} –ø–æ–∑–∏—Ü—ñ–π, {available_slots} –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤")
            
            # –Ø–∫—â–æ —î –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤, –≤–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ
            if available_slots >= len(all_signals):
                self.logger.info("–î–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
                processed_signals = []
                for signal_data in all_signals:
                    symbol = signal_data.get('symbol')
                    if symbol and symbol not in self.positions:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑'—è–≤–∏–ª–∞—Å—è —Ç–∏–º —á–∞—Å–æ–º
                        try:
                            trade_result = await self.execute_trade(symbol, signal_data)
                            processed_signals.append(trade_result)
                            self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –¥–ª—è {symbol}: {trade_result.get('action', 'N/A')}")
                        except Exception as e:
                            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è {symbol}: {e}")
                return processed_signals
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Å–∏–ª–æ—é (—Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ)
            sorted_signals = sorted(all_signals, 
                                  key=lambda x: x.get('signal_strength', 0.0), 
                                  reverse=True)
            
            self.logger.info("–†–∞–Ω–∂—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ —Å–∏–ª–æ—é:")
            for i, signal in enumerate(sorted_signals[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-10
                symbol = signal.get('symbol', 'N/A')
                strength = signal.get('signal_strength', 0.0)
                signal_type = signal.get('signal', 'N/A')
                self.logger.info(f"  {i}. {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f})")
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ —Å–∏–≥–Ω–∞–ª–∏ –≤ –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤
            selected_signals = sorted_signals[:available_slots] if available_slots > 0 else []
            rejected_signals = sorted_signals[available_slots:] if available_slots > 0 else sorted_signals
            
            if selected_signals:
                self.logger.info(f"–í–∏–±—Ä–∞–Ω–æ {len(selected_signals)} –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
                for signal in selected_signals:
                    symbol = signal.get('symbol', 'N/A')
                    strength = signal.get('signal_strength', 0.0)
                    signal_type = signal.get('signal', 'N/A')
                    self.logger.info(f"  ‚úÖ {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f})")
            
            if rejected_signals:
                self.logger.info(f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ {len(rejected_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è max_orders_qty:")
                for signal in rejected_signals:
                    symbol = signal.get('symbol', 'N/A')
                    strength = signal.get('signal_strength', 0.0)
                    signal_type = signal.get('signal', 'N/A')
                    self.logger.info(f"  ‚ùå {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f})")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏
            processed_signals = []
            for signal_data in selected_signals:
                symbol = signal_data.get('symbol')
                if symbol and symbol not in self.positions:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑'—è–≤–∏–ª–∞—Å—è —Ç–∏–º —á–∞—Å–æ–º
                    try:
                        trade_result = await self.execute_trade(symbol, signal_data)
                        processed_signals.append(trade_result)
                        self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—É —Ç–æ—Ä–≥—ñ–≤–ª—é –¥–ª—è {symbol}: {trade_result.get('action', 'N/A')}")
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π
                        if trade_result.get('success'):
                            current_positions += 1
                            
                    except Exception as e:
                        self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è {symbol}: {e}")
                else:
                    self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {symbol}, –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—é
            if rejected_signals and hasattr(self, 'telegram'):
                prioritization_msg = (
                    f"üéØ –ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤:\n"
                    f"‚Ä¢ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(all_signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤\n"
                    f"‚Ä¢ –í–∏–±—Ä–∞–Ω–æ: {len(selected_signals)} –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏—Ö\n"
                    f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {len(rejected_signals)} —Å–ª–∞–±—à–∏—Ö\n"
                    f"‚Ä¢ –ü–æ–∑–∏—Ü—ñ–π: {current_positions}/{max_orders}"
                )
                await self.telegram.send_notification(prioritization_msg, message_type='signal_prioritization')
            
            return processed_signals
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}", exc_info=True)
            return []
    
    async def _process_signals_with_buffer_prioritization(self, signal_buffer: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        üÜï –ù–û–í–ê –°–ò–°–¢–ï–ú–ê: –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –±—É—Ñ–µ—Ä–∞ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é.
        –í–∏–±–∏—Ä–∞—î –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î 
        Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.
        """
        try:
            if not signal_buffer:
                return []
            
            max_orders = TRADING_CONFIG.get('max_orders_qty', 3)
            current_positions = len(self.positions)
            available_slots = max_orders - current_positions
            
            self.logger.info(
                f"üéØ –†–æ–∑—É–º–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –±—É—Ñ–µ—Ä–∞: {len(signal_buffer)} —Å–∏–≥–Ω–∞–ª—ñ–≤, "
                f"{current_positions}/{max_orders} –ø–æ–∑–∏—Ü—ñ–π, {available_slots} –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤"
            )
            
            if available_slots <= 0:
                self.logger.warning(f"‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π ({current_positions}/{max_orders})")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                telegram_config = STRATEGY_CONFIG.get('telegram_filtering', {})
                if telegram_config.get('include_filtering_stats', True):
                    await self.telegram.send_notification(
                        f"üìä –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤: –≤—Å—ñ {len(signal_buffer)} —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ "
                        f"(–ø–æ–∑–∏—Ü—ñ–π: {current_positions}/{max_orders})",
                        message_type='signal_filtering'
                    )
                return []
            
            # –°–æ—Ä—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Å–∏–ª–æ—é (–Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
            sorted_signals = sorted(signal_buffer, 
                                  key=lambda x: x.get('signal_strength', 0.0), 
                                  reverse=True)
            
            self.logger.info("üìä –†–∞–Ω–∂—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤ –±—É—Ñ–µ—Ä—ñ –∑–∞ —Å–∏–ª–æ—é:")
            for i, signal in enumerate(sorted_signals, 1):
                symbol = signal.get('symbol', 'N/A')
                strength = signal.get('signal_strength', 0.0)
                signal_type = signal.get('signal', 'N/A')
                volume_info = signal.get('volume_boost_data', {})
                volume_surge = " üî•" if volume_info.get('volume_surge_active', False) else ""
                super_volume = " ‚ö°" if volume_info.get('super_volume_surge_active', False) else ""
                
                self.logger.info(f"  {i:2d}. {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f}){volume_surge}{super_volume}")
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ —Å–∏–≥–Ω–∞–ª–∏ –≤ –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤
            selected_signals = sorted_signals[:available_slots]
            rejected_signals = sorted_signals[available_slots:]
            
            if selected_signals:
                self.logger.info(f"‚úÖ –û–±—Ä–∞–Ω–æ {len(selected_signals)} –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:")
                for signal in selected_signals:
                    symbol = signal.get('symbol', 'N/A')
                    strength = signal.get('signal_strength', 0.0)
                    signal_type = signal.get('signal', 'N/A')
                    self.logger.info(f"  ‚úÖ {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f})")
            
            if rejected_signals:
                self.logger.info(f"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ {len(rejected_signals)} —Å–ª–∞–±—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤:")
                for signal in rejected_signals[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö
                    symbol = signal.get('symbol', 'N/A')
                    strength = signal.get('signal_strength', 0.0)
                    signal_type = signal.get('signal', 'N/A')
                    self.logger.info(f"  ‚ùå {symbol}: {signal_type} (–°–∏–ª–∞: {strength:.1f})")
                if len(rejected_signals) > 5:
                    self.logger.info(f"     ... —Ç–∞ —â–µ {len(rejected_signals) - 5} —Å–∏–≥–Ω–∞–ª—ñ–≤")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            executed_signals = []
            telegram_config = STRATEGY_CONFIG.get('telegram_filtering', {})
            
            for signal_data in selected_signals:
                symbol = signal_data.get('symbol')
                if symbol and symbol not in self.positions:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑'—è–≤–∏–ª–∞—Å—è —Ç–∏–º —á–∞—Å–æ–º
                    try:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ü–ï–†–ï–î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ
                        if (telegram_config.get('notify_only_selected_signals', True) and 
                            signal_data.get('entry_price', 0) > 0):
                            await self.telegram.send_signal_notification(signal_data)
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é
                        trade_result = await self.execute_trade(symbol, signal_data)
                        executed_signals.append(trade_result)
                        self.logger.info(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—É —Ç–æ—Ä–≥—ñ–≤–ª—é –¥–ª—è {symbol}: {trade_result.get('action', 'N/A')}")
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π
                        if trade_result.get('success'):
                            current_positions += 1
                            
                    except Exception as e:
                        self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è {symbol}: {e}")
                else:
                    self.logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {symbol}, –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            if telegram_config.get('include_filtering_stats', True):
                filtering_msg = (
                    f"üéØ –†–æ–∑—É–º–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤:\n"
                    f"‚Ä¢ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(signal_buffer)} —Å–∏–≥–Ω–∞–ª—ñ–≤\n"
                    f"‚Ä¢ –û–±—Ä–∞–Ω–æ: {len(selected_signals)} –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏—Ö\n"
                    f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {len(rejected_signals)} —Å–ª–∞–±—à–∏—Ö\n"
                    f"‚Ä¢ –í–∏–∫–æ–Ω–∞–Ω–æ: {len(executed_signals)} —É–≥–æ–¥\n"
                    f"‚Ä¢ –ü–æ–∑–∏—Ü—ñ–π: {current_positions}/{max_orders}"
                )
                
                if selected_signals:
                    filtering_msg += f"\n\n–û–±—Ä–∞–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏:"
                    for signal in selected_signals:
                        symbol = signal.get('symbol', 'N/A')
                        strength = signal.get('signal_strength', 0.0)
                        signal_type = signal.get('signal', 'N/A')
                        filtering_msg += f"\n‚úÖ {symbol}: {signal_type} ({strength:.1f})"
                
                await self.telegram.send_notification(filtering_msg, message_type='signal_filtering')
            
            return executed_signals
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –±—É—Ñ–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}", exc_info=True)
            return []

    async def _cleanup_missing_positions(self, positions_to_cleanup: List[str]):
        """
        ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î –ª–æ–∫–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ –∑ –ø–æ–ª—ñ–ø—à–µ–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        try:
            for symbol in positions_to_cleanup:
                if symbol in self.positions:
                    local_position = self.positions[symbol].copy()
                    
                    # ‚úÖ –ó–ú–Ü–ù–ï–ù–û: –ó–Ω–∏–∂–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ WARNING –Ω–∞ INFO –¥–ª—è –º–µ–Ω—à —Ç—Ä–∏–≤–æ–∂–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    self.logger.info(
                        f"üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ, "
                        f"–∞–ª–µ —î –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É."
                    )
                    
                    # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
                    closure_analyzed = await self.analyze_and_notify_position_closure(symbol, local_position)
                    
                    if not closure_analyzed:
                        # –Ø–∫—â–æ –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–¥–∞–≤—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                        entry_price = local_position.get('entry_price', 0)
                        quantity = local_position.get('quantity', 0)
                        side = local_position.get('side', 'UNKNOWN')
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ —á–µ—Ä–µ–∑ —Å—Ç–æ–ø, —Ç–µ–π–∫ –∞–±–æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—é
                        closure_reason = local_position.get('closure_reason', '')
                        last_action = local_position.get('last_action', '')
                        
                        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                        del self.positions[symbol]
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.trade_stats['automatic_cleanups'] = self.trade_stats.get('automatic_cleanups', 0) + 1
                        
                        # ‚úÖ –ü–û–ö–†–ê–©–ï–ù–û: –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏—Ö –æ—á–∏—â–µ–Ω—å, —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ
                        should_send_cleanup_notification = True
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –±—É–ª–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è (—Å—Ç–æ–ø, —Ç–µ–π–∫, –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è)
                        if any(reason in closure_reason.lower() for reason in ['stop loss', 'take profit', 'volume divergence', 'tp hit', 'sl hit']) or \
                           any(action in last_action.lower() for action in ['tp_hit', 'sl_hit', 'vol_div_exit', 'divergence']):
                            should_send_cleanup_notification = False
                            self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—é {symbol} –æ—á–∏—â–µ–Ω–æ (–±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ: {closure_reason or last_action})")
                        
                        if should_send_cleanup_notification:
                            # ‚úÖ –°–ü–†–û–©–ï–ù–û: –ú–µ–Ω—à –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á–∏—â–µ–Ω–Ω—è
                            cleanup_msg = f"üßπ –ü–æ–∑–∏—Ü—ñ—è {symbol} –æ—á–∏—â–µ–Ω–∞ (–≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞ –±—ñ—Ä–∂—ñ)"
                            
                            if hasattr(self, 'telegram'):
                                await self.telegram.send_notification(cleanup_msg, message_type='position_cleanup')
                        
                        if not should_send_cleanup_notification:
                            self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—é {symbol} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É (–±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)")
                        else:
                            self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—é {symbol} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É")
                    else:
                        # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ, –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∞ –≤ analyze_and_notify_position_closure
                        self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—é {symbol} –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ analyze_and_notify_position_closure")
                else:
                    self.logger.debug(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –≤–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ")
                    
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}", exc_info=True)

    async def _ensure_position_cleanup(self, symbol: str, reason: str = "generic_cleanup") -> bool:
        """
        ‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–µ–≥–∞–π–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø–∞–º'—è—Ç—ñ
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞ –ø–∞—Ä–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω—è
            
        Returns:
            bool: True —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –±—É–ª–∞ –æ—á–∏—â–µ–Ω–∞
        """
        try:
            if symbol in self.positions:
                self.trade_logger.info(f"üîÑ –ù–µ–≥–∞–π–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó {symbol} –∑ –ø–∞–º'—è—Ç—ñ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                del self.positions[symbol]
                return True
            return False
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
            return False

    async def validate_position_consistency(self) -> Dict[str, Any]:
        """
        –í–∞–ª—ñ–¥—É—î —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å –º—ñ–∂ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ —Ç–∞ —Å—Ç–∞–Ω–æ–º –Ω–∞ –±—ñ—Ä–∂—ñ.
        –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏—è–≤–ª–µ–Ω—ñ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ.
        """
        validation_report = {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'local_positions_count': len(self.positions),
            'exchange_positions_count': 0,
            'consistent_positions': [],
            'discrepancies': [],
            'missing_on_exchange': [],
            'missing_locally': [],
            'validation_status': 'unknown'
        }
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ
            exchange_positions_raw = await self.api_manager.get_positions()
            exchange_positions = {
                pos.get('symbol'): {
                    'side': pos.get('side'),
                    'size': float(pos.get('size', 0)),
                    'avg_price': float(pos.get('avgPrice', 0)),
                    'unrealized_pnl': float(pos.get('unrealisedPnl', 0))
                }
                for pos in exchange_positions_raw 
                if float(pos.get('size', 0)) > TRADING_CONFIG.get('min_trade_quantity_threshold', 0.000001)
            }
            
            validation_report['exchange_positions_count'] = len(exchange_positions)
            
            local_symbols = set(self.positions.keys())
            exchange_symbols = set(exchange_positions.keys())
            
            # –ü–æ–∑–∏—Ü—ñ—ó, —è–∫—ñ —î –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ
            validation_report['missing_on_exchange'] = list(local_symbols - exchange_symbols)
            
            # –ü–æ–∑–∏—Ü—ñ—ó, —è–∫—ñ —î –Ω–∞ –±—ñ—Ä–∂—ñ, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ
            validation_report['missing_locally'] = list(exchange_symbols - local_symbols)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å —Å–ø—ñ–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
            common_symbols = local_symbols & exchange_symbols
            qty_tolerance = TRADING_CONFIG.get('sync_tolerance_qty', 0.0000001)
            price_tolerance = TRADING_CONFIG.get('sync_tolerance_price_percentage', 0.002)
            
            for symbol in common_symbols:
                local_pos = self.positions[symbol]
                exchange_pos = exchange_positions[symbol]
                
                local_qty = local_pos.get('quantity', 0)
                local_side = local_pos.get('side', '')
                local_price = local_pos.get('entry_price', 0)
                
                exchange_qty = exchange_pos['size']
                exchange_side = exchange_pos['side']
                exchange_price = exchange_pos['avg_price']
                
                discrepancies = []
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                if abs(local_qty - exchange_qty) > qty_tolerance:
                    discrepancies.append(f"quantity: local={local_qty:.8f}, exchange={exchange_qty:.8f}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∏
                if local_side.upper() != exchange_side.upper():
                    discrepancies.append(f"side: local={local_side}, exchange={exchange_side}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏
                if local_price > 0 and exchange_price > 0:
                    price_diff_pct = abs(local_price - exchange_price) / local_price
                    if price_diff_pct > price_tolerance:
                        discrepancies.append(f"price: local={local_price:.6f}, exchange={exchange_price:.6f} (diff: {price_diff_pct*100:.3f}%)")
                
                if discrepancies:
                    validation_report['discrepancies'].append({
                        'symbol': symbol,
                        'issues': discrepancies
                    })
                else:
                    validation_report['consistent_positions'].append(symbol)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
            if (not validation_report['missing_on_exchange'] and 
                not validation_report['missing_locally'] and 
                not validation_report['discrepancies']):
                validation_report['validation_status'] = 'fully_consistent'
            elif validation_report['missing_on_exchange'] or validation_report['missing_locally']:
                validation_report['validation_status'] = 'positions_missing'
            elif validation_report['discrepancies']:
                validation_report['validation_status'] = 'data_discrepancies'
            else:
                validation_report['validation_status'] = 'unknown_issues'
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            if validation_report['validation_status'] == 'fully_consistent':
                self.logger.info("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π: –ø–æ–≤–Ω–∞ —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å –º—ñ–∂ –ª–æ–∫–∞–ª—å–Ω–∏–º —Å—Ç–∞–Ω–æ–º —Ç–∞ –±—ñ—Ä–∂–µ—é")
            else:
                self.logger.warning(f"‚ö†Ô∏è –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π –≤–∏—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º–∏: {validation_report['validation_status']}")
                if validation_report['missing_on_exchange']:
                    self.logger.warning(f"   –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ –±—ñ—Ä–∂—ñ: {validation_report['missing_on_exchange']}")
                if validation_report['missing_locally']:
                    self.logger.warning(f"   –í—ñ–¥—Å—É—Ç–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ: {validation_report['missing_locally']}")
                if validation_report['discrepancies']:
                    self.logger.warning(f"   –†–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö: {len(validation_report['discrepancies'])} –ø–æ–∑–∏—Ü—ñ–π")
            
            return validation_report
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π: {e}", exc_info=True)
            validation_report['validation_status'] = 'validation_error'
            validation_report['error'] = str(e)
            return validation_report

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ–π –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó, —è–∫—â–æ —Ü–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ
        # await self.db_manager.save_active_positions(self.positions)

    def _is_sl_triggered(self, close_price: float, stop_loss: float, side: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –±—É–ª–∞ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞ Stop Loss –æ—Ä–¥–µ—Ä
        
        Args:
            close_price: –¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
            stop_loss: –¶—ñ–Ω–∞ Stop Loss
            side: –°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (BUY/SELL)
            
        Returns:
            bool: True —è–∫—â–æ SL –±—É–ª–∞ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞
        """
        if stop_loss <= 0:
            return False
            
        tolerance = 0.0001  # –î–æ–ø—É—Å–∫ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω
        
        if side.upper() == 'BUY':
            # –î–ª—è BUY –ø–æ–∑–∏—Ü—ñ—ó SL —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–ª–∏ —Ü—ñ–Ω–∞ –ø–∞–¥–∞—î –Ω–∏–∂—á–µ SL
            return close_price <= (stop_loss + tolerance)
        else:  # SELL
            # –î–ª—è SELL –ø–æ–∑–∏—Ü—ñ—ó SL —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–ª–∏ —Ü—ñ–Ω–∞ —Ä–æ—Å—Ç–µ –≤–∏—â–µ SL
            return close_price >= (stop_loss - tolerance)
    
    def _is_tp_triggered(self, close_price: float, take_profits: List[Dict], side: str) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –±—É–ª–∞ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞ —è–∫–∞—Å—å Take Profit –æ—Ä–¥–µ—Ä
        
        Args:
            close_price: –¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
            take_profits: –°–ø–∏—Å–æ–∫ Take Profit —Ä—ñ–≤–Ω—ñ–≤
            side: –°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (BUY/SELL)
            
        Returns:
            bool: True —è–∫—â–æ –±—É–¥—å-—è–∫–∏–π TP –±—É–≤ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–π
        """
        if not take_profits:
            return False
            
        tolerance = 0.0001  # –î–æ–ø—É—Å–∫ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω
        
        for tp in take_profits:
            tp_price = tp.get('price', 0)
            if tp_price <= 0:
                continue
                
            if side.upper() == 'BUY':
                # –î–ª—è BUY –ø–æ–∑–∏—Ü—ñ—ó TP —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–ª–∏ —Ü—ñ–Ω–∞ —Ä–æ—Å—Ç–µ –¥–æ TP
                if close_price >= (tp_price - tolerance):
                    return True
            else:  # SELL
                # –î–ª—è SELL –ø–æ–∑–∏—Ü—ñ—ó TP —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–ª–∏ —Ü—ñ–Ω–∞ –ø–∞–¥–∞—î –¥–æ TP
                if close_price <= (tp_price + tolerance):
                    return True
        
        return False
    
    def _find_triggered_tp_level(self, close_price: float, take_profits: List[Dict], side: str) -> str:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —è–∫–∏–π —Å–∞–º–µ TP —Ä—ñ–≤–µ–Ω—å –±—É–≤ —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–π
        
        Args:
            close_price: –¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
            take_profits: –°–ø–∏—Å–æ–∫ Take Profit —Ä—ñ–≤–Ω—ñ–≤
            side: –°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó (BUY/SELL)
            
        Returns:
            str: –û–ø–∏—Å —Å–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ–≥–æ TP —Ä—ñ–≤–Ω—è
        """
        if not take_profits:
            return "Unknown"
            
        tolerance = 0.0001
        triggered_levels = []
        
        for i, tp in enumerate(take_profits):
            tp_price = tp.get('price', 0)
            tp_type = tp.get('type', f'TP{i+1}')
            
            if tp_price <= 0:
                continue
                
            is_triggered = False
            if side.upper() == 'BUY':
                is_triggered = close_price >= (tp_price - tolerance)
            else:  # SELL
                is_triggered = close_price <= (tp_price + tolerance)
                
            if is_triggered:
                triggered_levels.append(f"{tp_type} ({tp_price:.6f})")
        
        if triggered_levels:
            return ", ".join(triggered_levels)
        else:
            return "None (price analysis inconclusive)"

async def main_async():
    setup_logging()
    logger = logging.getLogger(__name__) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ __name__ –¥–ª—è –ª–æ–≥–µ—Ä–∞ –º–æ–¥—É–ª—è
    logger.info("=" * 60)
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ Lightning Volume")
    logger.info(f"–ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"–†–µ–∂–∏–º —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {TRADING_CONFIG['mode']}")
    logger.info(f"–¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏: {', '.join(TRADING_CONFIG['trade_pairs'])}")
    logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {TRADING_CONFIG['timeframe']} —Ö–≤–∏–ª–∏–Ω")
    logger.info("=" * 60)
    
    bot = TradingBot()
    try:
        await bot.run()
    except KeyboardInterrupt: # –û–±—Ä–æ–±–∫–∞ KeyboardInterrupt —Ç—É—Ç —Ç–∞–∫–æ–∂
        logger.info("–ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ main_async. –Ü–Ω—ñ—Ü—ñ—é—é –∑—É–ø–∏–Ω–∫—É –±–æ—Ç–∞...")
        if bot.is_running: # –Ø–∫—â–æ –±–æ—Ç —â–µ –ø—Ä–∞—Ü—é—î, –∑—É–ø–∏–Ω—è—î–º–æ –π–æ–≥–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ
            bot.is_running = False 
            # –î–∞—î–º–æ –±–æ—Ç—É —á–∞—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ
            # await asyncio.sleep(5) # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main_async: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ (main_async finally)")
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó –ø–æ –æ—á–∏—â–µ–Ω–Ω—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ö–æ—á–∞ bot.run() –º–∞—î —Ü–µ —Ä–æ–±–∏—Ç–∏


if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∂–µ –º–∞—î –≤—ñ–¥–±—É—Ç–∏—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ main_async
        print("\n–ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–∑–æ–≤–Ω—ñ—à–Ω—ñ–π KeyboardInterrupt).")
    except Exception as e: # –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        logging.getLogger(__name__).critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ: {e}", exc_info=True)